msgid ""
msgstr ""
"Project-Id-Version: ActiveLdap 3.1.0\n"
"PO-Revision-Date: 2025-02-16 10:23+0900\n"
"Last-Translator: Kouhei Sutou <kou@clear-code.com>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid "# ActiveLdap"
msgstr ""

msgid "A ruby library for object-oriented LDAP interface."
msgstr "Ruby用オブジェクト指向LDAPインターフェイス。"

msgid ""
"* Copyright (C) 2004-2006 Will Drewry <will@alum.bu.edu>\n"
"* Copyright (C) 2006-2020 Sutou Kouhei <kou@clear-code.com>"
msgstr ""

msgid "## Description"
msgstr "## 説明"

msgid ""
"'ActiveLdap' is a ruby library which provides a clean\n"
"objected oriented interface to LDAP library.  It was\n"
"inspired by ActiveRecord. This is not nearly as clean or as\n"
"flexible as ActiveRecord, but it is still trivial to define\n"
"new objects and manipulate them with minimal difficulty."
msgstr ""
"'ActiveLdap'はLDAPライブラリをきれいなオブジェクト指向APIで利用するためのライブラリです。ActiveRecordにインスパイアされていま"
"す。ActiveRecordほどきれいさや柔軟性がないかもしれませんが、ほとんど同じように新しいオブジェクトを作ったり操作したりできます。"

msgid ""
"For example and usage - read the\n"
"[document](https://activeldap.github.io/)."
msgstr ""

msgid "## Prerequisites"
msgstr "## 必要なもの"

msgid "### Ruby interpreter"
msgstr ""

msgid ""
"  * [Ruby](https://www.ruby-lang.org)\n"
"  * [JRuby](https://www.jruby.org/)"
msgstr ""

msgid "See the above links for installation."
msgstr ""

msgid "### LDAP client"
msgstr ""

msgid ""
"JRuby doesn't need to install new library because JRuby has builtin\n"
"LDAP support. Ruby users need one of them:"
msgstr ""

msgid ""
"* [Ruby/LDAP](https://rubygems.org/gems/ruby-ldap)\n"
"* [Net::LDAP](https://rubygems.org/gems/net-ldap)"
msgstr ""

msgid "### Active Model"
msgstr ""

msgid ""
"A toolkit for building modeling frameworks like Active Record and\n"
"Active Resource."
msgstr ""

msgid "## Rails"
msgstr ""

msgid ""
"See [Rails](file.rails.html)\n"
"([doc/text/rails.textile](doc/text/rails.md) in the repository and on\n"
"GitHub) page for Rails integration."
msgstr ""

msgid "## License"
msgstr "## ライセンス"

msgid ""
"This program is free software; you can redistribute it and/or modify it.  It i"
"s\n"
"dual licensed under Ruby's license and under the terms of the GNU General\n"
"Public License as published by the Free Software Foundation; either version 2,"
"\n"
"or (at your option) any later version."
msgstr ""

msgid "Please see the file LICENSE for the terms of the license."
msgstr "ライセンス条項についてはLICENSEファイルを見てください。"

msgid "## Thanks"
msgstr "## 感謝"

msgid ""
"This list may not be correct. If you notice mistakes of this\n"
"list, please point out."
msgstr "このリストには抜けがあるかもしれません。もし、このリストの間違いに気付いたら教えてください。"

msgid ""
"* Dick Davies\n"
"* Nathan Kinder\n"
"* Patrick Cole\n"
"* Google Inc.\n"
"* Nobody: Bug reports and API improveent ideas.\n"
"* James Hughes: Bug reports and advices and documentations.\n"
"* Buzz Chopra: Documentations.\n"
"* Christoph Lipp:\n"
"  * Bug reports.\n"
"  * Tell us character escape syntax.\n"
"* Jeff Hall: Bug reports.\n"
"* Ernie Miller: Bug reports and advices.\n"
"* Daniel Pfile: Patches.\n"
"* Jacob Wilkins: Bug reports.\n"
"* Ace Suares:\n"
"  * Bug reports.\n"
"  * Nederlands translations.\n"
"* Iain Pople: Bug reports and API improvement ideas.\n"
"* Kevin McCarthy: Patches.\n"
"* Perry Smith: Patches, bug reports and indications.\n"
"* Marc Dequènes: API suggestions.\n"
"* Jeremy Pruitt: Bug reports.\n"
"* Bodaniel Jeanes:\n"
"  * A suggestion for behavior on simple bind with empty password.\n"
"  * Bug reports.\n"
"* Naoto Morishima: Bug reports.\n"
"* David Morton:\n"
"  * An API improvement idea.\n"
"  * Bug reports.\n"
"* Lennon Day-Reynolds: Bug reports.\n"
"* Tilo: A bug report.\n"
"* Matt Mencel: Bug reports.\n"
"* CultureSpy:\n"
"  * Bug reports.\n"
"  * Bug fixes.\n"
"* gwarf12: A bug report.\n"
"* Baptiste Grenier: API improvement ideas.\n"
"* Richard 3 Nicholas: API improvement ideas.\n"
"* Kazuhiro NISHIYAMA: A bug report.\n"
"* Grzegorz Marszałek: A bug report.\n"
"* しまさわらさん: A suggesetion.\n"
"* Ted Lepich: A suggestion.\n"
"* danger1986: A suggestion.\n"
"* michael.j.konopka: Bug reports.\n"
"* ingersoll: A suggestion.\n"
"* Alexey.Chebotar: Bug reports.\n"
"* ery.lee: A bug report.\n"
"* id:dicdak: A bug report.\n"
"* Raiko Mitsu: A bug report.\n"
"* Kazuaki Takase: Documents in Japanese.\n"
"* Tim Hermans: A bug report.\n"
"* Joe Francis: A suggestion.\n"
"* Tiago Fernandes: Bug reports.\n"
"* achemze: A suggestion.\n"
"* George Montana Harkin: A suggestion.\n"
"* Marc Dequènes: Bug reports.\n"
"* brad@lucky-dip.net: A bug report.\n"
"* Hideyuki Yasuda: Bug reports.\n"
"* zachwily: A bug report.\n"
"* syrius.ml@no-log.org: A bug report.\n"
"* Tim Hermans: A bug report.\n"
"* Anthony M. Martinez: Helped SASL options support\n"
"* ilusi0n.x: A bug report.\n"
"* projekttabla: A suggestion.\n"
"* christian.pennaforte: A bug report.\n"
"* planetmcd: A bug report.\n"
"* spoidar: Rails 3 support.\n"
"* Kris Wehner: Rails 2.3.8 support.\n"
"* Ryan Tandy:\n"
"  * A test bug fix.\n"
"  * Rails 3 support.\n"
"* rbq: A bug report.\n"
"* Narihiro Nakamura: Rails 3 support.\n"
"* Hidetoshi Yoshimoto: Rails 3 support.\n"
"* warden: A bug report.\n"
"* bklier: A bug fix.\n"
"* Craig White: Bug reports."
msgstr ""

msgid "# README"
msgstr ""

msgid ""
"This document describes how to run benchmarks under\n"
"benchmark/ directory."
msgstr ""

msgid "## Configure your LDAP server"
msgstr ""

msgid ""
"You need a LDAP server to run benchmarks. This is dependes\n"
"on your environment."
msgstr ""

msgid ""
"In this document, we assume that you configure your LDAP\n"
"server by the following configuration:"
msgstr ""

msgid ""
"* host: 127.0.0.1\n"
"* base DN: dc=bench,dc=local\n"
"* encryption: startTLS\n"
"* bind DN: cn=admin,dc=local\n"
"* password: secret"
msgstr ""

msgid "## Configure ActiveLdap to connect to your LDAP server"
msgstr ""

msgid ""
"You need an ActiveLdap configuration in\n"
"benchmark/config.yaml to connect to your LDAP server. There\n"
"is a sample configuration in\n"
"benchmark/config.yaml.sample. It's good to start from it."
msgstr ""

msgid ""
"    % cp benchmark/config.yaml.sample benchmark/config.yaml\n"
"    % editor benchmark/config.yaml"
msgstr ""

msgid "The configuration uses the same format of ldap.yaml."
msgstr ""

msgid "## Run benchmarks"
msgstr ""

msgid ""
"You just run a bencmark script. It loads\n"
"benchmark/config.yaml and populate benchmark data automatically."
msgstr ""

msgid ""
"    % ruby benchmark/bench-backend.rb\n"
"\tPopulating..."
msgstr ""

msgid ""
"\tRehearsal ---------------------------------------------------------------\n"
"\t  1x: AL(LDAP)                0.220000   0.000000   0.220000 (  0.234775)\n"
"\t  1x: AL(Net::LDAP)           0.280000   0.000000   0.280000 (  0.273048)\n"
"\t  1x: AL(LDAP: No Obj)        0.000000   0.000000   0.000000 (  0.009217)\n"
"\t  1x: AL(Net::LDAP: No Obj)   0.060000   0.000000   0.060000 (  0.056727)\n"
"\t  1x: LDAP                    0.000000   0.000000   0.000000 (  0.003261)\n"
"\t  1x: Net::LDAP               0.040000   0.000000   0.040000 (  0.029862)\n"
"\t------------------------------------------------------ total: 0.600000sec"
msgstr ""

msgid ""
"\t\t\t\t\t\t\t\t\t  user     system      total        real\n"
"\t  1x: AL(LDAP)                0.200000   0.000000   0.200000 (  0.195660)\n"
"\t  1x: AL(Net::LDAP)           0.220000   0.000000   0.220000 (  0.213444)\n"
"\t  1x: AL(LDAP: No Obj)        0.010000   0.000000   0.010000 (  0.009000)\n"
"\t  1x: AL(Net::LDAP: No Obj)   0.030000   0.000000   0.030000 (  0.026847)\n"
"\t  1x: LDAP                    0.000000   0.000000   0.000000 (  0.003377)\n"
"\t  1x: Net::LDAP               0.020000   0.000000   0.020000 (  0.022662)"
msgstr ""

msgid ""
"\tEntries processed by Ruby/ActiveLdap + LDAP: 100\n"
"\tEntries processed by Ruby/ActiveLdap + Net::LDAP: 100\n"
"\tEntries processed by Ruby/ActiveLdap + LDAP: (without object creation): 100\n"
"\tEntries processed by Ruby/ActiveLdap + Net::LDAP: (without object creation): "
"100\n"
"\tEntries processed by Ruby/LDAP: 100\n"
"\tEntries processed by Net::LDAP: 100"
msgstr ""

msgid "\tCleaning..."
msgstr ""

msgid "# Development"
msgstr "# 開発"

msgid "Here is information for developers."
msgstr "開発者向け情報です。"

msgid "## Repository"
msgstr "## リポジトリ"

msgid ""
"ActiveLdap uses [Git repository on\n"
"GitHub](https://github.com/activeldap). Here is a list to get each\n"
"source code."
msgstr ""
"ActiveLdapは[GitHub上のGitリポジトリー](https://github.com/activeldap)を利用しています。ソースコードは以"
"下のように取得できます。"

msgid "[activeldap](https://github.com/activeldap/activeldap):"
msgstr ""

msgid ""
"```console\n"
"% git clone https://github.com/activeldap/activeldap.git"
msgstr ""

msgid "[al-admin](https://github.com/activeldap/al-admin):"
msgstr ""

msgid ""
"```console\n"
"% git clone https://github.com/activeldap/al-admin.git\n"
"```"
msgstr ""

msgid "## Issues"
msgstr "## 不具合・要望"

msgid ""
"ActiveLdap uses [Issues on\n"
"GitHub](https://github.com/activeldap/activeldap/issues) for issue\n"
"tracking. Please submit a issue when you find an issue."
msgstr ""

msgid "# News"
msgstr "# おしらせ"

msgid "## 5.2.3: 2019-02-15 {#release-5-2-3}"
msgstr ""

msgid "### Improvements"
msgstr "### 改良"

msgid ""
"* Changed to use add and delete for modify if it's needed.\n"
"  [GitHub#156][Patch by David Klotz]"
msgstr ""

msgid ""
"* Added support for timezone with munites offset such as `0530`.\n"
"  [GitHub#160][GitHub#161][Patch by Neng Xu]"
msgstr ""

msgid "* Added support for Ruby 2.6."
msgstr ""

msgid "### Thanks"
msgstr "## 感謝"

msgid "* David Klotz"
msgstr ""

msgid "* Neng Xu"
msgstr ""

msgid "## 5.2.2: 2018-07-12 {#release-5-2-2}"
msgstr ""

msgid ""
"* Added `:tls_options` option.\n"
"  [GitHub#156][Patch by David Klotz]"
msgstr ""

msgid "## 5.2.1: 2018-06-13 {#release-5-2-1}"
msgstr ""

msgid "### Fixes"
msgstr "### 修正"

msgid ""
"* Fixed a bug that configuration may be removed unexpectedly.\n"
"  [GitHub#155][Reported by Juha Erkkilä]"
msgstr ""

msgid "* Juha Erkkilä"
msgstr ""

msgid "## 5.2.0: 2018-05-09 {#release-5-2-0}"
msgstr ""

msgid ""
"* Added `:dc_base_class` and `:ou_base_class` options to\n"
"  `ActiveLdap::Populate.ensure_base`.\n"
"  [GitHub#153][Patch by hide_24]"
msgstr ""

msgid "* Added Active Model 5.2.0 support."
msgstr ""

msgid "* Improved connection error handling for net-ldap."
msgstr ""

msgid "* hide_24"
msgstr ""

msgid "## 5.1.1: 2018-01-17 {#release-5-1-1}"
msgstr ""

msgid ""
"* Added `:include_operational_attributes` convenient option to\n"
"  `ActiveLdap::Base.find`. `ActiveLdap::Base.find(...,\n"
"  :include_operational_attributes => true)` equals to\n"
"  `ActiveLdap::Base.find(..., :attributes => [\"*\", \"+\"])`.\n"
"  [GitHub#150][Reported by jas01]"
msgstr ""

msgid "* jas01"
msgstr ""

msgid "## 5.1.0: 2017-05-01 {#release-5-1-0}"
msgstr ""

msgid "* Supported Rails 5.1.0."
msgstr ""

msgid ""
"* Supported sub class instantiate by objectClass.\n"
"   [GitHub#134][Patch by Chris Garrigues]"
msgstr ""

msgid "* Improved error messages."
msgstr ""

msgid ""
"* Changed to the default LDAP client to net-ldap from ruby-ldap\n"
"  because ruby-ldap doesn't support timeout."
msgstr ""

msgid ""
"* Suppressed warnings.\n"
"  [GitHub#146][Reported by jas01]"
msgstr ""

msgid ""
"* Added missing dependency.\n"
"  [GitHub#145][Reported by Tom Wardrop]"
msgstr ""

msgid "* Chris Garrigues"
msgstr ""

msgid "* Tom Wardrop"
msgstr ""

msgid "## 4.0.6: 2016-04-07 {#release-4-0-6}"
msgstr ""

msgid ""
"* Updated supported Ruby versions.\n"
"  [GitHub#127] [Patch by weicheng]\n"
"* Supported spaces in DN.\n"
"  [GitHub#129] [Patch by belltailjp]"
msgstr ""

msgid ""
"* weicheng\n"
"* belltailjp"
msgstr ""

msgid "## 4.0.5: 2016-01-20 {#release-4-0-5}"
msgstr ""

msgid ""
"* Supported `unicodePwd` in Active Directory\n"
"  [GitHub#105] [Reported by Laas Toom]\n"
"* Supported Blowfish, SHA-256 and SHA-512 password hash with salt.\n"
"  [GitHub#108] [Patch by Gary Richards]\n"
"* Supported Ruby 2.2.\n"
"  [GitHub#115] [Reported by Jan Zikan]\n"
"  [GitHub#125] [Patch by Bohuslav Blín]\n"
"* Supported Ruby 2.3."
msgstr ""

msgid ""
"* Fixed documentation for `rails generate`.\n"
"  [GitHub#107] [Patch by Gary Richards]"
msgstr ""

msgid ""
"* Laas Toom\n"
"* Gary Richards\n"
"* Jan Zikan\n"
"* Bohuslav Blín"
msgstr ""

msgid "## 4.0.4: 2014-10-11 {#release-4-0-4}"
msgstr ""

msgid ""
"* Migrated to commit mail mailing list to \"Google\n"
"  Groups\":https://groups.google.com/forum/?hl=ja#!forum/activeldap-commit\n"
"  from RubyForge. Thanks to RubyForge! RubyForge was very helpful!\n"
"* Update project homepage URL in README.\n"
"  [GitHub#103] [Patch by Adam Whittingham]\n"
"* Removed needless `Enumerable` inclusion in `ActiveLdap::Base`.\n"
"  [GitHub#104] [Patch by Murray Steele]\n"
"* {ActiveLdap::Populate.ensure_base}: Supported ou entry creation in base DN.\n"
"* Added `follow_referrals` configuration. You can disable auto\n"
"  referrals following by specifying `false`. It is useful when you\n"
"  can't access referrals."
msgstr ""

msgid "  This configuration is enabled by default."
msgstr ""

msgid "  This configuration works only with ruby-ldap adapter."
msgstr ""

msgid "  [GitHub#99] [Suggested by hadmut]"
msgstr ""

msgid ""
"* Supported `bindname` extension in LDAP URL such as\n"
"  `ldap://host/dc=base,dc=name????bindname=cn%3Dadmin%2Cdc%3Dexample%2Cdc%3Dco"
"m%3F`."
msgstr ""

msgid ""
"* Fixed a bug logging is failed on removing a connection.\n"
"  [GitHub#94] [Reported by Francisco Miguel Biete]\n"
"* Fixed homepage URL in RubyGems.\n"
"  [GitHub#95] [Patch by Vít Ondruch]\n"
"* Fixed a bug that DN in LDAP URL is used as bind DN not base DN."
msgstr ""

msgid ""
"* Francisco Miguel Biete\n"
"* Vít Ondruch\n"
"* Adam Whittingham\n"
"* Murray Steele\n"
"* hadmut"
msgstr ""

msgid "## 4.0.3: 2014-05-15 {#4-0-3}"
msgstr ""

msgid ""
"* Supported stopping colorize logging by `config.colorize_logging = false`.\n"
"  [GitHub:#81] [Reported by nengxu]\n"
"* Supported PagedResults defined in RFC 2696 in the net-ldap adapter.\n"
"  [activeldap-discuss] Paged results\n"
"  [Suggested by Aaron Knister]\n"
"* Supported PagedResults defined in RFC 2696 in the ldap adapter.\n"
"  [GitHub#83] [Patch by Aaron Knister]\n"
"* Stopped to override ORM generator by default.\n"
"  [GitHub#87] [Patch by Josef Šimánek]\n"
"* Supported Rails 4.1.0.\n"
"  [GitHub#90] [Patch by Francisco Miguel Biete]\n"
"* document: Removed obsoleted description.\n"
"  [activeldap-discuss] [Reported by Jarod Watkins]\n"
"* Supported `ActiveLdap::Base.attribute_method?` .\n"
"  [GitHub#92] [Reported by Renaud Chaput]"
msgstr ""

msgid ""
"* Fixed a bug that `belongs_to :many` 's inconsistent behavior.\n"
"  You get DN attribute when you add an entry by DN attribute to\n"
"  belongs_to :many collection. It should return entry object instead of\n"
"  DN attribute. Because loaded collection returns entry objects.\n"
"  [activeldap-discuss] [Reported by Jarod Watkins]"
msgstr ""

msgid ""
"* nengxu\n"
"* Aaron Knister\n"
"* Josef Šimánek\n"
"* Francisco Miguel Biete\n"
"* Jarod Watkins\n"
"* Renaud Chaput"
msgstr ""

msgid "## 4.0.2: 2014-01-04 {#4-0-2}"
msgstr ""

msgid ""
"* Supported sub-tree moving by all adapters.\n"
"* Used YARD style link in documentation. [Reported by Fraser McCrossan]\n"
"* Supported Object-Security-Descriptor (OID: 1.2.840.113556.1.4.907)\n"
"  [GitHub:#66] [Reported by Nowhere Man]\n"
"* Made JEPG syntax binary.\n"
"* Supported binary encoding for values in a container.\n"
"  [GitHub:#66] [Reported by Nowhere Man]\n"
"* Added documentation about `:filter` option of {ActiveLdap::Base.find}\n"
"  into tutorial.\n"
"  [GitHub:#72] [Patch by Fernando Martinez]\n"
"* Migrated to gettext gem from gettext_i18n_rails gem because ActiveLdap\n"
"  dosen't use any gettext_i18n_rails gem features..\n"
"  [activeldap-discuss] [Reported by Christian Nennemann]\n"
"* Supported retry on timeout on JNDI adapter.\n"
"  [GitHub:#77] [Patch by Ryosuke Yamazaki]"
msgstr ""

msgid ""
"* Removed needless newlines generated by `pack(\"m\")`.\n"
"  [GitHub:#75] [GitHub:#76] [Patch by Ryosuke Yamazaki]\n"
"* Fixed a bug that `after_initialize` isn't run.\n"
"  [GitHub:#79] [Patch by Nobutaka OSHIRO]"
msgstr ""

msgid ""
"* Fraser McCrossan\n"
"* Nowhere Man\n"
"* Fernando Martinez\n"
"* Christian Nennemann\n"
"* Ryosuke Yamazaki\n"
"* Nobutaka OSHIRO"
msgstr ""

msgid "## 4.0.1: 2013-08-29 {#4-0-1}"
msgstr ""

msgid ""
"* Added ActiveLdap::EntryAttribute#exist?.\n"
"* [GitHub:#66] Improved Active Directory support.\n"
"  Binary data can be validated correctly. [Reported by Nowhere Man]\n"
"* [GitHub:#6][GitHub:#69] Improved setup description in tutorial.\n"
"  [Reported by Radosław Antoniuk] [Patch by Francisco Miguel Biete]\n"
"* [GitHub:#56] Supported moving sub-tree. It requires Ruby/LDAP 0.9.13 or late"
"r,\n"
"  JRuby or net-ldap 0.5.0 or later. (net-ldap 0.5.0 isn't released yet.)\n"
"  [Reported by Jean-François Rioux]"
msgstr ""

msgid ""
"* [GitHub:#65] Removed removed attributes values by removing\n"
"  objectClasses. [Reported by mbab]"
msgstr ""

msgid ""
"* mbab\n"
"* Nowhere Man\n"
"* Radosław Antoniuk\n"
"* Francisco Miguel Biete\n"
"* Jean-François Rioux"
msgstr ""

msgid "## 4.0.0: 2013-07-13 {#4-0-0}"
msgstr ""

msgid ""
"* [activeldap-discuss] Added {ActiveLdap::Entry} for convenient.\n"
"  [Suggested by Craig White]\n"
"* [GitHub:#45] Ensured that {ActiveLdap::Persistence#save!} returns\n"
"  true on success. But you should use {ActiveLdap::Persistence#save}\n"
"  to determine success or failure by return value.\n"
"  [Reported by Suggested by Erik M Jacobs]\n"
"* [GitHub:#52] Improved binary data handling on Ruby 1.9.3.\n"
"  [Patch by Carl P. Corliss]\n"
"* [GitHub:#53] Supported lower case hashed password.\n"
"  [Patch by jpiotro3]\n"
"* [GitHub:#51] Supported implicit railtie load by\n"
"  `require \"active_ldap\"`.\n"
"  [Patch by mperrando]\n"
"* [GitHub:#62] Improved JNDI communication error handling.\n"
"  [Patch by Ryosuke Yamazaki]\n"
"* [GitHub:#61] Supported Rails 4. Dropped Rails 3 support.\n"
"  [Patch by superscott]\n"
"* [GitHub:#63] Handled Errno::ECONNRESET as connection in\n"
"  net-ldap adapter [Patch by mpoornima]"
msgstr ""

msgid ""
"* [GitHub:#44] Fixed a typo in document.\n"
"  [Patch by Vaucher Philippe]\n"
"* [GitHub:#50] Fixed a stack overflow during SASL bind to a\n"
"  unresponsive LDAP server.\n"
"  [Patch by pwillred]\n"
"* [GitHub:#54] Fixed a link in document.\n"
"  [Patch by marco]\n"
"* [GitHub:#57] Fixed a wrong blank value detection for \"false\".\n"
"  [Reported by Robin Doer]"
msgstr ""

msgid ""
"* Craig White\n"
"* Vaucher Philippe\n"
"* Erik M Jacobs\n"
"* pwillred\n"
"* Carl P. Corliss\n"
"* jpiotro3\n"
"* marco\n"
"* mperrando\n"
"* Robin Doer\n"
"* Ryosuke Yamazaki\n"
"* superscott\n"
"* mpoornima"
msgstr ""

msgid "## 3.2.2: 2012-09-01 {#3-2-2}"
msgstr ""

msgid ""
"* Supported entry creation by direct ActiveLdap::Base use.\n"
"  [Reported by Craig White]\n"
"* Started to use Travis CI."
msgstr ""
"* 直接ActiveLdap::Baseを使ったエントリ作成をサポート。 [Craig Whiteさんが報告]\n"
"* Travis CIの使用を開始。"

msgid "* Craig White"
msgstr "* Craig Whiteさん"

msgid "## 3.2.1: 2012-08-31 {#3-2-1}"
msgstr ""

msgid ""
"* Fixed a bug that ActiveLdap::Base#delete doesn't work.\n"
"  [Reported by Craig White]"
msgstr "* ActiveLdap::Base#deleteが動かない問題を修正。 [Craig Whiteさんが報告]"

msgid "## 3.2.0: 2012-08-29 {#3-2-0}"
msgstr ""

msgid ""
"* [GitHub:#39] Supported Rails 3.2.8. [Reported by Ben Langfeld]\n"
"* [GitHub:#13] Don't use deprecated Gem.available?. [Patch by sailesh]\n"
"* [GitHub:#19] Supported new entry by `ha_many :wrap`. [Patch by Alex Tomlins]"
"\n"
"* Supported `:only` option in XML output.\n"
"* [GitHub:#14] Supported nil as single value. [Reported by n3llyb0y]\n"
"* [GitHub:#20] Supported ActiveModel::MassAssignmentSecurity.\n"
"  [Reported by mihu]\n"
"* [GitHub:#24] Supported Ruby 1.9 style Hash syntax in generator.\n"
"  [Patch by ursm]\n"
"* [GitHub:#25][GitHub:#39] Supported ActiveModel::Dirty.\n"
"  [Patch by mihu][Reported by Ben Langfeld]\n"
"* [GitHub:#26] Improved speed for dirty. [Patch by mihu]\n"
"* [GitHub:#28] Improved speed for initialization. [Patch by mihu]\n"
"* [GitHub:#29] Added .gemspec. [Suggested by mklappstuhl]\n"
"* [GitHub:#34] Removed an unused method. [Patch by mihu]\n"
"* [GitHub:#37] Improved will_paginate support. [Patch by Craig White]\n"
"* [GitHub:#40] Added missing test files to .gemspec. [Reported by Vít Ondruch]"
"\n"
"* [GitHub:#41] Improved speed for find. [Patch by unixmechanic]\n"
"* Changed i18n backend to gettext from fast_gettext again.\n"
"* [GitHub:#42] Fixed a bug that optional second is required for GeneralizedTim"
"e.\n"
"  [Reported by masche842]"
msgstr ""

msgid ""
"* sailesh\n"
"* Alex Tomlins\n"
"* n3llyb0y\n"
"* mihu\n"
"* ursm\n"
"* Ben Langfeld\n"
"* mklappstuhl\n"
"* Craig White\n"
"* Vít Ondruch\n"
"* unixmechanic\n"
"* masche842"
msgstr ""

msgid "## 3.1.1: 2011-11-03 {#3-1-1}"
msgstr ""

msgid ""
"* Supported Rails 3.1.1.\n"
"* [GitHub:#9] Fixed a typo in document. [warden]\n"
"* [GitHub:#11] Added persisted?. [bklier]\n"
"* [GitHub:#16] Supported 4 or more bytes salt for SSHA and SMD5.\n"
"  [Alex Tomlins]"
msgstr ""

msgid ""
"* warden\n"
"* bklier\n"
"* Alex Tomlins"
msgstr ""

msgid "## 3.1.0: 2011-07-09 {#3-1-0}"
msgstr ""

msgid ""
"* Supported Rails 3.1.0.rc4.\n"
"  [Ryan Tandy, Narihiro Nakamura, Hidetoshi Yoshimoto]\n"
"* Removed ActiveRecord dependency and added ActiveModel dependency.\n"
"* Used YARD instead of RDoc as documentation sysytem."
msgstr ""

msgid "## 1.2.4: 2011-05-13"
msgstr ""

msgid ""
"* Splited AL-Admin into other repository: https://github.com/activeldap/al-adm"
"in\n"
"* [GitHub:#2] Fixed \"path po cound not be found\" error by fast_gettext.\n"
"  [rbq]"
msgstr ""

msgid "## 1.2.3: 2011-04-30"
msgstr ""

msgid ""
"* [#40] Ignored nil value attribute.\n"
"  [christian.pennafort]\n"
"* [#48] Escaped \":\" in filter value.\n"
"  [planetmcd]\n"
"* Added missing rubygems require.\n"
"  [spoidar]\n"
"* Used fast_gettext instead of gettext.\n"
"  [Peter Fern]\n"
"* Supported Rails 2.3.11.\n"
"  [Kris Wehner]\n"
"* Fixed wrong assertion in test.\n"
"  [Ryan Tandy]"
msgstr ""

msgid ""
"* christian.pennafort\n"
"* planetmcd\n"
"* spoidar\n"
"* Peter Fern\n"
"* Kris Wehner\n"
"* Ryan Tandy"
msgstr ""

msgid "## 1.2.2: 2010-07-04"
msgstr ""

msgid ""
"* Supported ActiveRecord 2.3.8 and Rails 2.3.8.\n"
"* [#37] Fixed gem dependencies in Rakefile. [zachwily]\n"
"* Fixed a bug that setting 'false' but 'nil' is returned. [Hideyuki Yasuda]\n"
"* Supported non-String attribute value as LDIF value. [Matt Mencel]\n"
"* Worked with a LDAP server that uses 'objectclass' not 'objectClass' as\n"
"  objectClass attribute name. [Tim Hermans]\n"
"* [#41] Provide SASL-option support, primarily for authzid\n"
"  [Anthony M. Martinez]\n"
"* [#43] Error with to_xml [ilusi0n.x]\n"
"* [#44] Accept '0' and '1' as boolean value [projekttabla]\n"
"* [#27429] Fixed inverted validatation by validate_excluded_classes\n"
"  [Marc Dequènes]\n"
"* Supported DN attribute value for assosiation replacement.\n"
"  [Jörg Herzinger]"
msgstr ""

msgid "## 1.2.1: 2009-12-15"
msgstr ""

msgid ""
"* Supported ActiveRecord 2.3.5 and Rails 2.3.5.\n"
"* Supported GetText 2.1.0 and Locale 2.0.5.\n"
"* belongs_to(:many) support DN attribute.\n"
"* [#31] ActiveLdap::Base#attributes returns data that reflects\n"
"  schema definition. [Alexey.Chebotar]\n"
"* blocks DN attribute change by mass assignment with :id => ....\n"
"* [#35] fix has_many association is broken. [culturespy]\n"
"* Supported nested attribute options. [Hideyuki Yasuda]"
msgstr ""

msgid "## 1.2.0: 2009-09-22"
msgstr ""

msgid ""
"* Supported ActiveRecord 2.3.4 and Rails 2.3.4.\n"
"* [IMCOMPATIBLE]\n"
"  [#23932] Inconsistant DN handling in object attributes [Marc Dequènes]\n"
"  (ActiveLdap::Base#dn and ActiveLdap::Base#base return\n"
"  ActiveLdap::DN not String)\n"
"* [#26824] support operational attributes detection [Marc Dequènes]\n"
"  (added ActiveLdap::Schema::Attribute#directory_operation?)\n"
"* [#27] Error saving an ActiveLDAP user [brad@lucky-dip.net]\n"
"* [#29] Raised on modify_rdn_entry when rdn already exists [Alexey.Chebotar]\n"
"* Added ActiveLdap::DN.parent.\n"
"* Supported renaming an entry. Renaming other DTI is only supported by\n"
"  JNDI backend."
msgstr ""

msgid "## 1.1.0: 2009-07-18"
msgstr ""

msgid ""
"* Improved tutorial. [Kazuaki Takase]\n"
"* Improvements:\n"
"  * API:\n"
"    * [#26] Supported to_xml for associations. [achemze]\n"
"    * ActiveLdap::Base.delete_all(filter=nil, options={}) ->\n"
"    ActiveLdap::Base.delete_all(filter_or_options={}).\n"
"    Sure, old method signature is also still supported.\n"
"    * belongs_to(:many) with :foreign_key is deprecated.\n"
"    Use :primary_key instead of :foreign_key. [Kazuaki Takase]\n"
"    * Means of has_many's :primary_key and :foreign_key are inverted.\n"
"    [Kazuaki Takase]\n"
"    * [experimental] Added ldap_field ActionView helper to\n"
"    generate form fileds for a LDAP entry.\n"
"  * Suppressed needless attributes updating.\n"
"* Dependencies:\n"
"  * Re-supported GetText.\n"
"  * ActiveRecord 2.3.2 is only supported."
msgstr ""

msgid "## 1.0.9"
msgstr ""

msgid ""
"* Added documents in Japanese. [Kazuaki Takase]\n"
"* Supported Ruby 1.9.1.\n"
"  * [#20] [Ruby 1.9 Support] :: Running Tests [Alexey.Chebotar]\n"
"* Supported Rails 2.3.2.\n"
"  * [#18] [Rails 2.3 Support] :: Running WEBrick Hangs [Alexey.Chebotar]\n"
"* Bug fixes:\n"
"  * Fixed blank values detection. [David Morton]\n"
"  * [#22] Ruby 1.8.6 p287 :: Undefined methods [Alexey.Chebotar]\n"
"  * Fixed gem loading. [Tiago Fernandes]\n"
"  * Fixed DN change via #base=. [David Morton]\n"
"  * Fixed infinite retry on timeout.\n"
"  * Fixed needless reconnection.\n"
"* API improvements:\n"
"  * Removed needless instance methods: #prefix=,\n"
"   #dn_attribute=, #sort_by=, #order=, #required_classes=,\n"
"   #recommended_classes= and #excluded_classes. [David Morton]\n"
"  * Removed obsolete scafoold_al generator.\n"
"  * Reduced default :retry_limit.\n"
"  * Supported association as parameter. [Joe Francis]\n"
"  * Normalized schema attribute name. [Tim Hermans]\n"
"  * Suppressed AuthenticationError -> ConnectionError\n"
"   conversion on reconnection. [Kazuaki Takase]\n"
"  * Added ActiveLdap::Schema#dump.\n"
"  * ActiveLdap::Base.establish_connection ->\n"
"   ActiveLdap::Base.setup_connection.\n"
"  * Supported ActiveLdap::Base.find(:last).\n"
"  * Added convenient methods:\n"
"    * ActiveLdap::Base.first\n"
"    * ActiveLdap::Base.last\n"
"    * ActiveLdap::Base.all"
msgstr ""

msgid "## 1.0.2"
msgstr ""

msgid ""
"* Removed Base64 module use.\n"
"* Improved LDIF parser.\n"
"* Improved scheme parser.\n"
"* Supported Base64 in XML serialization.\n"
"* Supported TLS options.\n"
"* Supported ActiveRecord 2.2.2.\n"
"* Supported Ruby on Rails 2.2.2.\n"
"* Used rails/init.rb and rails_generators/ directory structure convention\n"
"  for Rails and gem. rails/ directory will be removed after 1.0.2 is released."
"\n"
"* AL-Admin migrated to Ruby on Rails 2.2.2 form 2.0.2.\n"
"* Improved ActiveDirectory integration.\n"
"* Accepted :class_name for belong_to and has_many option.\n"
"* Improved default port guess.\n"
"* Bug fixes:\n"
"  * [#4] ModifyRecord#load doesn't operate atomic. [gwarf12]\n"
"  * [#5] to_xml supports :except option. [baptiste.grenier]\n"
"  * [#6] to_xml uses ActiveResource format. [baptiste.grenier]\n"
"  * Out of ranged GeneralizedTime uses Time.at(0) as fallback value.\n"
"   [Richard Nicholas]\n"
"  * ActiveLdap::Base#to_s uses #to_ldif. [Kazuhiro NISHIYAMA]\n"
"  * Fixed excess prefix extraction. [Grzegorz Marszałek]\n"
"  * Skiped read only attribute validation. [しまさわらさん]\n"
"  * Treated \"\" as empty value. [Ted Lepich]\n"
"  * [#9][#16] Reduced raising when DN value is invalid.\n"
"   [danger1986][Alexey.Chebotar]\n"
"  * [#10][#12] Fixed needless ',' is appeared. [michael.j.konopka]\n"
"  * [#11] Required missing 'active_ldap/user_password'. [michael.j.konopka]\n"
"  * [#13] Returned entries if has_many :wrap has nonexistent entry.\n"
"   [ingersoll]\n"
"  * [#15] Fixed type error on computing DN. [ery.lee]\n"
"  * \">=\" filter operator doesn't work. [id:dicdak]\n"
"  * [#17] ActiveLdap::Base.create doesn't raise exception. [Alexey.Chebotar]"
msgstr ""

msgid "## 1.0.1"
msgstr ""

msgid ""
"* Fixed GetText integration.\n"
"* Fixed ActiveLdap::Base.find with ActiveLdap::DN. (Reported by Jeremy Pruitt)"
"\n"
"* Fixed associated bugs. (Reported by CultureSpy)\n"
"* Supported ActiveLdap::Base#attribute_present? with nonexistence attribute.\n"
"  (Reported by Matt Mencel)\n"
"* Added ActiveLdap::Base#.to_ldif_record.\n"
"* Improved inspect.\n"
"* Supported ActiveSupport 2.1.0."
msgstr ""

msgid "## 1.0.0"
msgstr ""

msgid ""
"* Fixed GSSAPI auth failure. [#18764] (Reported by Lennon Day-Reynolds)\n"
"* Supported Symbol as :dn_attribute_value. [#18921] (Requested by Nobody)\n"
"* Improved DN attribute detection. (Reported by Iain Pople)\n"
"* Avoided unnecesally modify operation. (Reported by Tilo)"
msgstr ""

msgid "## 0.10.0"
msgstr ""

msgid ""
"* Implemented LDIF parser.\n"
"* Improved validation:\n"
"  * Added some validations.\n"
"  * Fixed SINGLE-VALUE validation. [#17763]\n"
"   (Reported by Naoto Morishima)\n"
"* Supported JNDI as backend.\n"
"* Improved auto reconnection.\n"
"* Supported Rails 2.0.2.\n"
"* Improved performance. (4x)\n"
"* [API CHANGE]: removed \"'binary' =>\" from getter result."
msgstr ""

msgid ""
"  <pre>\n"
"  !!!plain\n"
"  e.g.:\n"
"    before:\n"
"        user.user_certificate # => {\"binary\" => \"...\"}\n"
"       now:\n"
"        user.user_certificate # => \"...\"\n"
"  </pre>"
msgstr ""

msgid ""
"* Added :excluded_classed ldap_mapping option.\n"
"* Logged operation time used for LDAP operation.\n"
"* Improved API:\n"
"  * Accepted non String value for find(:value => XXX).\n"
"   (Suggested by Marc Dequèn)\n"
"  * Accepted DN as ActiveLdap::Base.new(XXX).\n"
"   (Reported by Jeremy Pruitt)\n"
"  * Treated empty password for smiple bind as anonymous bind.\n"
"   (Suggested by Bodaniel Jeans)\n"
"  * Ensured adding \"objectClass\" for find's :attribute value. [#16946]\n"
"   (Suggested by Nobody)\n"
"  * Fixed a GeneralizedTime type casting bug.\n"
"   (Reported by Bodaniel Jeanes)\n"
"  * Supported :base and :prefix search/find option value escaping.\n"
"   (Suggested by David Morton)"
msgstr ""

msgid "## 0.9.0"
msgstr ""

msgid ""
"* Improved DN handling.\n"
"* Supported attribute value validation by LDAP schema.\n"
"* Changed RubyGems name: ruby-activeldap -> activeldap.\n"
"* Removed Log4r dependency.\n"
"* Supported lazy connection establishing.\n"
"  * [API CHANGE]: establish_connection doesn't connect LDAP server.\n"
"* [API CHANGE]: Removed ActiveLdap::Base#establish_connection.\n"
"* Added ActiveLdap::Base#bind. (use this instead of #establish_connection)\n"
"* Supported implicit acts_as_tree.\n"
"* [API CHANGE]: Supported type casting.\n"
"* Supported :uri option in configuration.\n"
"* Improved Rails integration:\n"
"  * Followed Rails 2.0 changes.\n"
"  * AL-Admin:\n"
"    * Supported lang parameter in URL.\n"
"    * Improved design a bit. (Please someone help us!)\n"
"    * Supported schema inspection.\n"
"    * Supported objectClass modifiation.\n"
"  * Rails plugin:\n"
"    * Added ActiveLdap::VERSION check.\n"
"    * Added model_active_ldap generator.\n"
"    * Renamed scaffold_al generator to scaffold_active_ldap."
msgstr ""

msgid "## 0.8.3"
msgstr ""

msgid ""
"* Added AL-Admin Sample Rails app\n"
"* Added Ruby-GetText-Package support\n"
"* Added a Rails plugin\n"
"* Improved schema handling\n"
"* Improved performance\n"
"* Many bug fixes"
msgstr ""

msgid "## 0.8.2"
msgstr ""

msgid ""
"* Added Net::LDAP support!\n"
"  * supported SASL Digest-MD5 authentication with Net::LDAP.\n"
"* improved LDAP server support:\n"
"  * improved Sun DS support.\n"
"  * improved ActiveDirectory support. Thanks to Ernie Miller!\n"
"  * improved Fedora-DS support. Thanks to Daniel Pfile!\n"
"* improved existing functions:\n"
"  * improved DN handling. Thanks to James Hughes!\n"
"  * improved SASL bind.\n"
"  * improved old API check.\n"
"  * improved schema handling. Thanks to Christoph Lipp!\n"
"  * improved filter notification.\n"
"* updated documents:\n"
"  * updated Rails realted documenation. Thanks to James Hughes!\n"
"  * updated documentation for the changes between 0.7.1 and 0.8.0.\n"
"   Thanks to Buzz Chopra!\n"
"* added new features:\n"
"  * added scaffold_al generator for Rails.\n"
"  * added required_classes to default filter value. Thanks to Jeff Hall!\n"
"  * added :recommended_classes option to ldap_mapping.\n"
"  * added :sort_by and :order options to find.\n"
"  * added ActiveLdap::Base#to_param for ActionController.\n"
"* fixed some bugs:\n"
"  * fixed rake install/uninstall.\n"
"  * fixed typos. Thanks to Nobody!\n"
"  * fixed required_classes initialization. Thanks to James Hughes!"
msgstr ""

msgid "## 0.8.1"
msgstr ""

msgid ""
"* used Dependencies.load_paths.\n"
"* check whether attribute name is available or not.\n"
"* added test for find(:first, :attribute => 'xxx', :value => 'yyy').\n"
"* supported ActiveSupport 1.4.0.\n"
"* make the dual licensing of ruby-activeldap clear in the README.\n"
"* followed edge Rails: don't use Reloadable::Subclasses if doesn't need.\n"
"* added examples/.\n"
"* removed debug code.\n"
"* normalized attribute name to support wrong attribute names in MUST/MAY.\n"
"* supported getting dn value by Base#[].\n"
"* test/test_userls.rb: followed userls changes.\n"
"* update the doc href.\n"
"* provide a dumb example of how to use the old association(return_objects) sty"
"le API with the new awesome API.\n"
"* followed new API.\n"
"* removed a finished task: support Reloadable::Subclasses."
msgstr ""

msgid "## 0.8.0"
msgstr ""

msgid ""
"* Makefile/gemspec system replaced with Rakefile + Hoe\n"
"* Bugfix: Allow base to be empty\n"
"* Add support for Date, DateTime, and Time objects (patch from Patrick Cole)\n"
"* Add support for a :filter argument to override the default attr=val LDAP sea"
"rch filter in find_all() and find() (patch from Patrick Cole)\n"
"* Add Base#update_attributes(hash) method which does bulk updates to attribute"
"s (patch from Patrick Cole) and saves immediately\n"
"* API CHANGE: #attributes now returns a Hash of attribute_name => clone(attrib"
"ute_val)\n"
"* API CHANGE: #attribute_names now returns an alphabetically sorted list of at"
"tribute names\n"
"* API CHANGE;\n"
"* Added attributes=() as the implementation for update_attributes(hash) (witho"
"ut autosave)\n"
"* API TRANSITION: Base#write is now deprecated. Please use Base#save\n"
"* API TRANSITION: Added SaveError exception (which is a subclass of WriteError"
" for now)\n"
"* API TRANSITION: Base.connect() is now deprecated. Please use Base.establish_"
"connection()\n"
"* API TRANSITION: Base.close() is now deprecated. Please use Base.remove_conne"
"ction()\n"
"* API TRANSITION: :bind_format and :user of Base.establish_connection() are no"
"w deprecated. Please use :bind_dn\n"
"* Added update_attribute(name, value) to update one attribute and save immedia"
"tely\n"
"* #delete -> #destroy\n"
"* Base.destroy_all\n"
"* Base.delete(id) & Base.delete_all(filter)\n"
"* add Base.exists?(dnattr_val)\n"
"* attr_protected\n"
"* Base.update(dnattr_val, attributes_hash) - instantiate, update, save, return"
"\n"
"* Base.update_all(updates_hash, filter)\n"
"* attribute_present?(attribute) - if not empty/nil\n"
"* has_attribute?(attr_name)  - if in hash\n"
"* reload() (refetch from LDAP)\n"
"* make save() return false on fail\n"
"* make save!() raise EntryNotSaved exception\n"
"* to_xml()\n"
"* `clear_active_connections!()` -- Conn per class\n"
"  * make @@active_connections and name them by\n"
"* base_class() (just return the ancestor)\n"
"* Separate ObjectClass changes to live in ActiveLDAP::ObjectClass\n"
"  * add_objectclass\n"
"  * remove_objectclass\n"
"  * replace_objectclass\n"
"  * disallow direct objectclass access?\n"
"* support ActiveRecord::Validations.\n"
"* support ActiveRecord::Callbacks.\n"
"* rename to ActiveLdap from ActiveLDAP to integrate RoR easily and enforce\n"
"  many API changes."
msgstr ""

msgid "## 0.7.4"
msgstr ""

msgid ""
"* Bugfix: do not base LDAP::PrettyError on RuntimeError due to rescue evaluati"
"on.\n"
"* Bugfix: :return_objects was overriding :objects in find and find_all\n"
"* Rollup exception code into smaller space reusing similar code."
msgstr ""

msgid "## 0.7.3"
msgstr ""

msgid ""
"* Made has_many and belongs_to use :return_objects value\n"
"* Force generation of LDAP constants on import - currently broken"
msgstr ""

msgid "## 0.7.2"
msgstr ""

msgid ""
"* Stopped overriding Conn.schema in ldap/schema - now use schema2\n"
"* Fix attributes being deleted when changing between objectclasses with shared"
" attributes\n"
"* Added schema attribute case insensitivity\n"
"* Added case insensitivity to the attribute methods.\n"
"* Added LDAP scope override support to ldap_mapping via :scope argument. (ldap"
"_mapping :scope => LDAP::LDAP_SCOPE_SUBTREE, ...)\n"
"* Fixed the bug where Klass.find() return nil (default arg for find/find_all n"
"ow '*')\n"
"* Added :return_objects to Base.connect()/configuration.rb -- When true, sets "
"the default behavior in Base.find/find_all to return objects instead of just t"
"he dnattr string.\n"
"* Hid away several exposed private class methods (do_bind, etc)\n"
"* Undefined dnattr for a class now raises a ConfigurationError\n"
"* Centralized all connection management code where possible\n"
"* Added Base.can_reconnect? which returns true if never connected or below the"
" :retries limit\n"
"* Added block support to Base.connection to ensure \"safe\" connection usage. Th"
"is is not just for internal library use. If you need to do something fancy wit"
"h the connection object, use Base.connection do |conn| ...\n"
"* Fixed object instantiation in Base#initialize when using full DNs\n"
"* Added :parent_class option to ldap_mapping which allows for object.parent() "
"to return an instantiated object using the parent DN. (ldap_mapping :parent_cl"
"ass => String, ...)\n"
"* Fixed reconnect bug in Base#initialize (didn't respect infinite retries)\n"
"* Added(*) :timeout argument to allow timeouts on hanging LDAP connections\n"
"* Added(*) :retry_on_timeout boolean option to allow disabling retries on time"
"outs\n"
"* Added TimeoutError\n"
"* Added(*) a forking timeout using SIGALRM to interrupt handling.\n"
"* (*) Only works when RUBY_PLATFORM has \"linux\" in it"
msgstr ""

msgid "## 0.7.1"
msgstr ""

msgid ""
"* Fix broken -W0 arg in activeldap.rb\n"
"* attribute_method=: '' and nil converted to ldap-pleasing [] values\n"
"* Added checks in write and search for connection down (to reconnect)\n"
"* Fixed broken idea of LDAP::err2string exceptions. Instead took errcodes from"
" ldap.c in Ruby/LDAP."
msgstr ""

msgid "## 0.7.0"
msgstr ""

msgid ""
"* ConnectionError thrown from #initialize when there is no connection and retr"
"y limit was exceeded\n"
"* ConnectionError thrown when retries exceeded when no connection was created\n"
"* Separated connection types: SSL, TLS, and plain using :method\n"
"* Localized reconnect logic into Base.reconnect(force=false)\n"
"* Fixed password_block evaluation bug in do_bind() which broke SIMPLE re-binds"
" and broke reconnect\n"
"* Add support for config[:sasl_quiet] in Base.connect\n"
"* (Delayed a case sensitivity patch for object classes and attributes due to w"
"eird errors)\n"
"* Add :retry_wait to Base.connect to determine the timeout before retrying a c"
"onnection\n"
"* Fixed ActiveLDAP::Base.create_object() - classes were enclosed in quotes\n"
"* Added :ldap_scope Base.connect() argument to allow risk-seeking users to cha"
"nge the LDAP scope to something other than ONELEVEL.\n"
"* Cleaned up Configuration.rb to supply all default values for ActiveLDAP::Bas"
"e.connect() and to use a constant instead of overriding class variables for no"
" good reason.\n"
"* Added scrubbing for :base argument into Base.connect() to make sure a ' does"
"n't get evaluated.\n"
"* Refactored Base.connect(). It is now much cleaner and easier to follow.\n"
"* Moved schema retrieval to after bind in case a server requires privileges to"
" access it.\n"
"* Reworked the bind process to be a little prettier. A lot of work to do here "
"still.\n"
"* Added LDAP::err2exception(errno) which is the groundwork of a coming overhau"
"l in user friendly error handling.\n"
"* Added support for Base::connect(.., :password => String, ...) to avoid stupi"
"d Proc.new {'foo'} crap\n"
"* Add :store_password option. When this is set, :password is not cleared and :"
"password_block is not re-evaluated on each rebind."
msgstr ""

msgid "## 0.6.0"
msgstr ""

msgid ""
"* Disallow blank DN attribute values on initialization\n"
"* Fix bug reported by Maik Schmidt regarding object creation\n"
"* Added error checking to disallow DN attribute value changes\n"
"* Added AttributeAssignmentError (for above)\n"
"* Import() and initialize() no longer call attribute_method=()\n"
"* Added error condition if connection fails inside initialize()\n"
"* Changes examples and tests to use \"dc=localdomain\"\n"
"* has_many() entries no longer return nil when empty"
msgstr ""

msgid "## 0.5.9"
msgstr ""

msgid ""
"* Change default base to dc=localdomain (as per Debian default).\n"
"* schema2.rb:attr() now returns [] instead of '' when empty.\n"
"* Lookup of new objects does not put dnattr()=value into the Base on lookup.\n"
"* Scope is now use ONELEVEL instead of SUBTREE as it broke object boundaries.\n"
"* Fixed @max_retries misuse.\n"
"* Added do_connect retries.\n"
"* Fixed find and find_all for the case - find_all('*').\n"
"* Fixed broken creation of objects from anonymous classes.\n"
"* Fixed broken use of ldap_mapping with anonymous classes."
msgstr ""

msgid "## 0.5.8: Bugfix galore"
msgstr ""

msgid ""
"* Allow nil \"prefix\"\n"
"* Fixed the dup bug with Anonymous patch.\n"
"* (maybe) Fixed stale connection problems by attempting reconn/bind.\n"
"* Hiding redefine warnings (for now)"
msgstr ""

msgid "## 0.5.7"
msgstr ""

msgid ""
"* Fixed the @data.default = [] bug that daniel@nightrunner.com pointed out\n"
"  (and partially patched)."
msgstr ""

msgid "## 0.5.6"
msgstr ""

msgid "* Added support for foreign_key => 'dn' in has_many."
msgstr ""

msgid "## 0.5.5"
msgstr ""

msgid ""
"* Remove @@logger.debug entries during build\n"
"* Building -debug and regular gems and tarballs"
msgstr ""

msgid "## 0.5.4"
msgstr ""

msgid ""
"* Added Base#import to streamline the Base.find and Base.find_all methods\n"
"  * Speeds up find and find_all by not accessing LDAP multiple times\n"
"   for data we already have.\n"
"* Added tests/benchmark which is a slightly modified version of excellent\n"
"  benchmarking code contributed by\n"
"  Ollivier Robert <roberto -_-AT-_- keltia.freenix.fr>."
msgstr ""

msgid "## 0.5.3"
msgstr ""

msgid ""
"* Changed attribute_method to send in associations\n"
"  * fixes belongs_to (with local_kay) and inheritance around that"
msgstr ""

msgid "## 0.5.2"
msgstr ""

msgid "* Make sure values are .dup'd when they come from LDAP"
msgstr ""

msgid "## 0.5.1"
msgstr ""

msgid ""
"* Changed Schema2#class_attributes to return @{:must => [], :may => []}@\n"
"* Fixed Base#must and Base#may to return with full SUPerclass requirements"
msgstr ""

msgid "## 0.5.0"
msgstr ""

msgid ""
"* API CHANGE (as with all 0.x.0 changes) (towards ActiveRecord duck typing)\n"
"  * Base#ldapattribute now always returns an array\n"
"  * Base#ldapattribute(true) now returns a dup of an array, string, etc \n"
"   when appropriate (old default) - This is just for convenience\n"
"  * Base#ldapattribute returns the stored value, not just a .dup\n"
"  * Associations methods return objects by default instead of just names.\n"
"   Group.new('foo').members(false) will return names only.\n"
"  * Base.connect returns true as one might expect\n"
"* Value validation and changing (binary, etc) occur prior to write, and\n"
"  not immediately on attribute_method=(value).\n"
"* Attribute method validity is now determined /on-the-fly/.\n"
"* Default log level set to OFF speeds up 'speedtest' by 3 seconds! \n"
"  (counters last point which added some slowness :)\n"
"* Added Schema2#class_attributes which caches and fully supertype expands\n"
"  attribute lists.\n"
"* Integrated Schema2#class_attributes with apply_objectclass which automagical"
"ly\n"
"  does SUP traversal and automagically updates available methods on calls to\n"
"  #attributes, #method_missing, #validate, and #write\n"
"* Added 'attributes' to 'methods' allowing for irb autocompletion and other\n"
"  normal rubyisms\n"
"* Moved almost all validation to Base#validate to avoid unexpected exceptions\n"
"  being raised in seemingly unrelated method calls. This means that invalid \n"
"  objectClasses may be specified. This will only be caught on #write or \n"
"  a pre-emptive #validate. This goes for all attribute errors though.\n"
"  This also makes it possible to \"break\" objects by removing the 'top'\n"
"  objectclass and therefore the #objectClass method..."
msgstr ""

msgid "## 0.4.4"
msgstr ""

msgid ""
"* Fixed binary subtype forcing:\n"
"  * was setting data as subtype ;binary even when not required\n"
"* Added first set of unit tests.\n"
"  * These will be cleaned up in later releases as more tests are added.\n"
"* Fixed subtype clobber non-subtype (unittest!)\n"
"  * cn and cn;lang-blah: the last loaded won\n"
"* Fixed multivalued subtypes from being shoved into a string (unittest!)\n"
"  * an error with attribute_input_value"
msgstr ""

msgid "## 0.4.3"
msgstr ""

msgid ""
"* Fixed write (add) bugs introduced with last change\n"
"  * only bug fixes until unittests are in place"
msgstr ""

msgid "## 0.4.2"
msgstr ""

msgid ""
"* Added ruby-activeldap.gemspec\n"
"* Integrated building a gem of 'ruby-activeldap' into Makefile.package\n"
"* Added attr parsing cache to speed up repetitive calls: approx 13x speedup\n"
"  * 100 usermod-binary-add calls"
msgstr ""

msgid ""
"   <pre>\n"
"   !!!plain\n"
"   Without attr parsing cache:\n"
"     real    13m53.129s\n"
"     user    13m11.350s\n"
"     sys     0m7.030s\n"
"   With attr parsing cache:\n"
"     real    1m0.416s\n"
"     user    0m28.390s\n"
"     sys     0m2.380s\n"
"   </pre>"
msgstr ""

msgid "## 0.4.1:"
msgstr ""

msgid ""
"* Schema2 was not correctly parsing objectClass entries.\n"
"  * This is fixed for now but must be revisited."
msgstr ""

msgid "## 0.4.0"
msgstr ""

msgid ""
"* Added #<attribute>(arrays) argument which when true\n"
"  always returns arrays. e.g."
msgstr ""

msgid ""
"  <pre>\n"
"  !!!plain\n"
"  irb> user.cn(true)\n"
"  => ['My Common Name']\n"
"  </pre>"
msgstr ""

msgid ""
"  This makes things easier for larger programming tasks.\n"
"* Added subtype support:\n"
"  * Uses Hash objects to specify the subtype\n"
"   e.g. @user.userCertificate = {'binary' => File.read('mycert.der')}@\n"
"  * Added recursive type enforcement along with the subtype handling\n"
"  * This required overhauling the #write method.\n"
"    * Please report any problems ASAP! :^)\n"
"* Added automagic binary support\n"
"  * subtype wrapping done automatically\n"
"  * relies on X-NOT-HUMAN-READABLE flag\n"
"* Added LDAP::Schema2 which is an extension of Ruby/LDAP::Schema\n"
"  * made Schema#attr generic for easy type dereferencing\n"
"* Updated rdoc in activeldap.rb\n"
"* Updated examples (poorly) to reflect new functionality\n"
"* Added several private helper functions"
msgstr ""

msgid "## 0.3.6"
msgstr ""

msgid ""
"* Fixed dn attribute value extraction on find and find_all\n"
"  * these may have grabbed the wrong value if a DN attr has\n"
"   multiple values.\n"
"* Fixed Base.search to return all values as arrays and update\n"
"  multivalued ones correctly\n"
"* Lowered the amount of default logging to FATAL only"
msgstr ""

msgid "## 0.3.5"
msgstr ""

msgid "* Moved to rubyforge.org!"
msgstr ""

msgid "## 0.3.4"
msgstr ""

msgid "* Changed license to Ruby's"
msgstr ""

msgid "## 0.3.3"
msgstr ""

msgid ""
"* Changed Base.search to return an array instead of a hash of hashes\n"
"* Change Base.search to take in a hash as its arguments"
msgstr ""

msgid "## 0.3.2"
msgstr ""

msgid "* Bug fix - fixed support for module'd extension classes (again!)"
msgstr ""

msgid "## 0.3.1"
msgstr ""

msgid ""
"* Updated the documentation\n"
"* Fixed ignoring of attrs argument in Base.search\n"
"* Fixed mistake in groupls (using dnattr directly)\n"
"* Fixed a mistake with overzealous dup'ing"
msgstr ""

msgid "## 0.3.0"
msgstr ""

msgid ""
"* MORE API CHANGES (configuration.rb, etc)\n"
"* Major overhaul to the internals!\n"
"  * removed @@BLAH[@klass] in lieu of defining\n"
"   class methods which contain the required values. This\n"
"   allows for clean inheritance of Base subclasses! Whew!\n"
"  * Added @@config to store the options currently in use\n"
"   after a Base.connect\n"
"  * Now cache passwords for doing reconnects\n"
"  * dnattr now accessible to the outside as a class method only\n"
"* Added Base.search to wrap normal LDAP search for convenience.\n"
"  * This returns a hash of hashes with the results indexed first by\n"
"   full dn, then by attribute."
msgstr ""

msgid "## 0.2.0"
msgstr ""

msgid ""
"* API CHANGES:\n"
"  * Extension classes must be defined using map_to_ldap instead of setting\n"
"   random values in initialize\n"
"  * Base#find is now Base.find_all and is a class method\n"
"  * Base.find returns the first match a la Array#find\n"
"  * force_reload is gone in belongs_to and has_many created methods\n"
"  * hiding Base.new, Base.find, and Base.find_all from direct access\n"
"* added uniq to setting objectClass to avoid stupid errors\n"
"* fixed new object creation bug where attributes were added before the\n"
"  objectclass resulting in a violation (Base#write)\n"
"* fixed attribute dereferencing in Base#write\n"
"* fixed bug with .dup on Fixnums\n"
"* methods created by has_many/belongs_to  and find and find_all now take an\n"
"  optional argument dnattr_only which will return the value of dnattr for\n"
"  each result instead of a full object.\n"
"* Base.connection=(conn) added for multiplexing connections\n"
"* Added a manual to activeldap.rb which covers most usage of Ruby/ActiveLDAP\n"
"* Base.connect(:try_sasl => true) should now work with GSSAPI if you are\n"
"  using OpenLDAP >= 2.1.29"
msgstr ""

msgid "## 0.1.8"
msgstr ""

msgid ""
"* .dup all returned attribute values to avoid weirdness\n"
"* .dup all assigned values to avoid weirdness\n"
"* Changed default configuration.rb to use example.com"
msgstr ""

msgid "## 0.1.7"
msgstr ""

msgid ""
"* Added support for non-unique DN attributes\n"
"* Added authoritative DN retrieval with 'object.dn'"
msgstr ""

msgid "## 0.1.6"
msgstr ""

msgid ""
"* Added Base.close method for clearing the existing connection (despite Ruby/L"
"DAP's lack of .close)"
msgstr ""

msgid "## 0.1.5"
msgstr ""

msgid "* Fixed incorrect usage of @klass in .find (should .find be a class method?)"
msgstr ""

msgid "## 0.1.4"
msgstr ""

msgid "* Change WARN to INFO in associations.rb for has_many"
msgstr ""

msgid "## 0.1.3"
msgstr ""

msgid ""
"* Fixed class name mangling\n"
"* Added support for classes to take DNs as the initialization value"
msgstr ""

msgid "## 0.1.2"
msgstr ""

msgid ""
"* Patch from Dick Davies: Try SSL before TLS\n"
"* Log4r support\n"
"* Better packaging (automated)\n"
"* Work-around for SSL stupidity\n"
"  * SSLConn doesn't check if the port it connected to is really using SSL!"
msgstr ""

msgid "## 0.1.1"
msgstr ""

msgid ""
"* Dynamic table class creation\n"
"* SASL/GSSAPI disabled by default - doesn't work consistently"
msgstr ""

msgid "## 0.1.0"
msgstr ""

msgid ""
"* Added foreign_key to has_many\n"
"* Added local_key to belongs_to\n"
"* Added primary_members to Group example\n"
"* Added \"nil\" filtering to has_many\n"
"* Packaged up with setup.rb\n"
"* Added RDocs and better comments"
msgstr ""

msgid "## 0.0.9"
msgstr ""

msgid ""
"* Separated extension classes from ActiveLDAP module\n"
"* Cleaned up examples with new requires"
msgstr ""

msgid "## 0.0.8"
msgstr ""

msgid ""
"* Added user and group scripting examples\n"
"  * usermod, userls, useradd, userdel\n"
"  * groupmod, groupls"
msgstr ""

msgid "## 0.0.7"
msgstr ""

msgid ""
"* Cleaner authentication loop:\n"
"  * SASL (GSSAPI only), simple, anonymous\n"
"* Added allow_anonymous option added (default: false)"
msgstr ""

msgid "## 0.0.6"
msgstr ""

msgid ""
"* Write support cleaned up\n"
"* Exception classes added"
msgstr ""

msgid "## 0.0.5"
msgstr ""

msgid "* LDAP write support added"
msgstr ""

msgid "## 0.0.4"
msgstr ""

msgid "* MUST and MAY data validation against schema using objectClasses"
msgstr ""

msgid "## 0.0.3"
msgstr ""

msgid "* LDAP attributes alias resolution and data mapping"
msgstr ""

msgid "## 0.0.2"
msgstr ""

msgid "* Associations: has_many and belongs_to Class methods added for Base"
msgstr ""

msgid "## 0.0.1"
msgstr ""

msgid "* Extension approach in place with example User and Group classes"
msgstr ""

msgid "## 0.0.0"
msgstr ""

msgid "* Basic LDAP read support in place with hard-coded OUs"
msgstr ""

msgid "# Rails"
msgstr ""

msgid "ActiveLdap supports Rails 4.0 or later."
msgstr ""

msgid "## Install"
msgstr "## インストール"

msgid "To install, simply add the following code to your Gemfile:"
msgstr "Gemfileに以下のようなコードを追加するとインストールできます:"

msgid ""
"```ruby\n"
"gem 'activeldap', :require => 'active_ldap/railtie'\n"
"```"
msgstr ""

msgid ""
"You should also depend on an LDAP adapter such as Net::LDAP\n"
"or Ruby/LDAP. The following example uses Ruby/LDAP:"
msgstr ""

msgid ""
"```ruby\n"
"gem 'ruby-ldap'\n"
"```"
msgstr ""

msgid ""
"Bundler will install the gems automatically when you run\n"
"`bundle install`."
msgstr ""

msgid "## Configuration"
msgstr ""

msgid ""
"You can use a LDAP configuration per environment. They are in\n"
"a file named 'ldap.yml' in the config directory of your\n"
"rails app. This file has a similar function to the\n"
"'database.yml' file that allows you to set your database\n"
"connection configurations per environment. Similarly, the\n"
"ldap.yml file allows configurations to be set for\n"
"development, test, and production environments."
msgstr ""

msgid "You can generate 'config/ldap.yml' by the following command:"
msgstr ""

msgid ""
"```console\n"
"% script/rails generate active_ldap:scaffold\n"
"```"
msgstr ""

msgid ""
"You need to modify 'config/ldap.yml' generated by\n"
"`active_ldap:scaffold`. For instance, the development entry\n"
"would look something like the following:"
msgstr ""

msgid ""
"```yaml\n"
"development:\n"
"  host: 127.0.0.1\n"
"  port: 389\n"
"  base: dc=localhost\n"
"  bind_dn: cn=admin,dc=localhost\n"
"  password: secret\n"
"```"
msgstr ""

msgid ""
"When your application starts up,\n"
"ActiveLdap::Base.setup_connection will be called with the\n"
"parameters specified for your current environment."
msgstr ""

msgid ""
"You can replace default orm generators with gems one\n"
"to skip `active_ldap prefix` in `config/application.rb`:"
msgstr ""

msgid ""
"```ruby\n"
"config.app_generators.orm :active_ldap\n"
"```"
msgstr ""

msgid "## Model"
msgstr ""

msgid ""
"You can generate a User model that represents entries under\n"
"ou=Users by the following command:"
msgstr ""

msgid ""
"```console\n"
"% script/rails generate active_ldap:model User --dn-attribute uid --classes pe"
"rson PosixAccount\n"
"```"
msgstr ""

msgid "It generates the following app/model/user.rb:"
msgstr "以下のようなapp/model/user.rbが生成されます:"

msgid ""
"```ruby\n"
"class User < ActiveLdap::Base\n"
"  ldap_mapping :dn_attribute => \"uid\",\n"
"               :prefix => \"ou=Users\",\n"
"               :classes => [\"person\", \"PosixAccount\"]\n"
"end\n"
"```"
msgstr ""

msgid "You can add relationships by modifying app/model/user.rb:"
msgstr "app/model/user.rbを編集して関係設定を追加できます:"

msgid ""
"```ruby\n"
"class User < ActiveLdap::Base\n"
"  ldap_mapping :dn_attribute => 'uid',\n"
"               :prefix => \"ou=Users\",\n"
"               :classes => ['person', 'posixAccount']\n"
"  belongs_to :primary_group,\n"
"             :class_name => \"Group\",\n"
"             :foreign_key => \"gidNumber\",\n"
"             :primary_key => \"gidNumber\"\n"
"  belongs_to :groups,\n"
"             :many => 'memberUid'\n"
"end\n"
"```"
msgstr ""

msgid "You can also generate a Group model by the following command:"
msgstr "以下のコマンドでGroupモデルも生成できます:"

msgid ""
"```console\n"
"% script/rails generate active_ldap:model Group --classes PosixGroup\n"
"```"
msgstr ""

msgid "app/model/group.rb:"
msgstr ""

msgid ""
"```ruby\n"
"class Group < ActiveLdap::Base\n"
"  ldap_mapping :dn_attribute => \"cn\",\n"
"               :prefix => \"ou=Groups\",\n"
"               :classes => [\"PosixGroup\"]\n"
"end\n"
"```"
msgstr ""

msgid "You can add relationships by modifying app/model/group.rb:"
msgstr "app/model/group.rbを編集して関連設定を追加できます:"

msgid ""
"```ruby\n"
"class Group < ActiveLdap::Base\n"
"  ldap_mapping :dn_attribute => \"cn\",\n"
"               :prefix => \"ou=Groups\",\n"
"               :classes => [\"PosixGroup\"]\n"
"  has_many :members,\n"
"           :class_name => \"User\",\n"
"           :wrap => \"memberUid\"\n"
"  has_many :primary_members,\n"
"           :class_name => \"Group\",\n"
"           :foreign_key => \"gidNumber\",\n"
"           :primary_key => \"gidNumber\"\n"
"end\n"
"```"
msgstr ""

msgid "You can also generate a Ou model by the following command:"
msgstr "以下のコマンドでOuモデルも生成できます:"

msgid ""
"```console\n"
"% script/rails generate active_ldap:model Ou --prefix '' --classes organizatio"
"nalUnit\n"
"```"
msgstr ""

msgid ""
"```ruby\n"
"class Ou < ActiveLdap::Base\n"
"  ldap_mapping :dn_attribute => \"cn\",\n"
"               :prefix => \"\",\n"
"               :classes => [\"organizationalUnit\"]\n"
"end\n"
"```"
msgstr ""

msgid "# Tutorial"
msgstr "# チュートリアル"

msgid "## Introduction"
msgstr "はじめに"

msgid ""
"ActiveLdap is a novel way of interacting with LDAP.  Most interaction\n"
"with LDAP is done using clunky LDIFs, web interfaces, or with painful\n"
"APIs that required a thick reference manual nearby. ActiveLdap aims to\n"
"fix that.  Inspired by [Active\n"
"Record](https://rubygems.org/gems/activerecord), ActiveLdap provides\n"
"an object oriented interface to LDAP entries."
msgstr ""
"ActiveLdap は LDAP を操作する今までにない方法です。大半のLDAP操作は難しいLDIFを扱うか、ウェブインターフェースを利用するか、説明の省"
"かれたリファレンスマニュアルを参照しながら、難解なAPIを利用しなければなりませんでした。\n"
"\n"
"ActiveLdap はこの解決を目指します。[Active Record](https://rubygems.org/gems/activerecord)"
"によって着想した ActiveLdap は、LDAP エントリに対するオブジェクト指向のインターフェースを提供します。"

msgid ""
"The target audience is system administrators and LDAP users everywhere that\n"
"need quick, clean access to LDAP in Ruby."
msgstr "対象読者はシステム管理者やLDAPユーザであって、手軽かつきれいなLDAPアクセスの方法を求めるすべての人です。"

msgid "### What's LDAP?"
msgstr ""

msgid ""
"LDAP stands for \"Lightweight Directory Access Protocol.\" Basically this means\n"
"that it is the protocol used for accessing LDAP servers.  LDAP servers\n"
"lightweight directories.  An LDAP server can contain anything from a simple\n"
"digital phonebook to user accounts for computer systems.  More and more\n"
"frequently, it is being used for the latter.  My examples in this text will\n"
"assume some familiarity with using LDAP as a centralized authentication and\n"
"authorization server for Unix systems. (Unfortunately, I've yet to try this\n"
"against Microsoft's ActiveDirectory, despite what the name implies.)"
msgstr ""
"LDAPは”軽量ディレクトリアクセスプロトコル”のことです。これは基本的にLDAPサーバと対話するためのプロトコルを意味します。LDAPサーバは軽量のディレ"
"クトリサーバです。LDAPサーバはシンプルな電話帳からコンピュータ上のユーザアカウントのリストまで、幅広い情報を格納することができますが、大抵の場合後者のた"
"めに使われます。\n"
"\n"
"このテキストでの各例は、読者が LDAPサーバを Unix 系システムのための中央認証・認可サーバとして利用することを熟知しているものと仮定して記載していま"
"す。（残念なことに、私はまだMicrsoft ActiveDirectoryに対して ActiveLdap を試していません。名前に \"Directory\""
" が含まれていはいるのですが。）"

msgid ""
"Further reading:\n"
"* [RFC1777](https://tools.ietf.org/html/rfc1777) - Lightweight Directory Acces"
"s Protocol\n"
"* [OpenLDAP](https://www.openldap.org)"
msgstr ""

msgid "### So why use ActiveLdap?"
msgstr "### では何故 ActiveLdap なのか？"

msgid ""
"Using LDAP directly (even with the excellent Ruby/LDAP), leaves you bound to\n"
"the world of the predefined LDAP API.  While this API is important for many\n"
"reasons, having to extract code out of LDAP search blocks and create huge\n"
"arrays of LDAP.mod entries make code harder to read, less intuitive, and just\n"
"less fun to write.  Hopefully, ActiveLdap will remedy all of these\n"
"problems!"
msgstr ""
"LDAPを直接扱うさいには（たとえ素晴らしい Ruby/LDAPライブラリを用いても）、既存の LDAP APIに拘束されることになります。このAPIは巨大"
"な配列を生成し、コードを読みづらく、また楽しくないものにしてしまいます。もしあなたがあなたのコードにLDAPを統合するためのきれいな方法を欲するなら、Act"
"iveLdap を使う理由になるでしょう。"

msgid "## Getting Started"
msgstr "## はじめよう"

msgid "### Requirements"
msgstr "### 動作条件"

msgid ""
"* A Ruby implementation: [Ruby](https://www.ruby-lang.org) or [JRuby](https://"
"www.jruby.org/)\n"
"* A LDAP library: [Ruby/LDAP](https://rubygems.org/gems/ruby-ldap) (for Ruby),"
" [Net::LDAP](https://rubygems.org/gems/net-ldap) (for Ruby or JRuby) or JNDI ("
"for JRuby)\n"
"* A LDAP server: [OpenLDAP](https://www.openldap.org/), etc\n"
"  * Your LDAP server must allow `root_dse` queries to allow for schema queries"
msgstr ""

msgid "### Installation"
msgstr "### インストール"

msgid "Assuming all the requirements are installed, you can install by gem."
msgstr "インストールは gem で行えます。"

msgid ""
"```console\n"
"# gem install activeldap\n"
"```"
msgstr ""

msgid "Now as a quick test, you can run:"
msgstr "インストールされたか確認するには、irb を利用できます。以下のように require して、true が返ってくればインストール成功です。"

msgid ""
"```console\n"
"$ irb\n"
"irb> require 'active_ldap'\n"
"=> true\n"
"irb> exit\n"
"```"
msgstr ""

msgid ""
"If the require returns false or an exception is raised, there has been a\n"
"problem with the installation."
msgstr ""

msgid "## Usage"
msgstr "## 利用方法"

msgid ""
"This section covers using ActiveLdap from writing extension classes to\n"
"writing applications that use them."
msgstr "この章では ActiveLdap 拡張クラスをコーディングし、アプリケーションを記述し、それらを利用するまでを記載します。"

msgid "Just to give a taste of what's to come, here is a quick example using irb:"
msgstr "何を得られるかざっくりつかむために、irb を利用して簡単な例を紹介しましょう。まずActiveLdap を require します。"

msgid ""
"```text\n"
"irb> require 'active_ldap'\n"
"```"
msgstr ""

msgid ""
"Call setup_connection method  for connect to LDAP server. In this case, LDAP s"
"erver\n"
"is localhost, and base of LDAP tree is \"dc=dataspill,dc=org\"."
msgstr ""
"LDAP サーバとの接続を確立します。ここでは最も基本的なメソッドであるsetup_connection を利用します。サンプルとして、接続先は local"
"host、base を \"dc=dataspill,dc=org\" とします。"

msgid ""
"```text\n"
"irb> ActiveLdap::Base.setup_connection :host => 'localhost', :base => 'dc=data"
"spill,dc=org'\n"
"```"
msgstr ""

msgid "Here's an extension class that maps to the LDAP Group objects:"
msgstr ""
"次に、ActiveLdap::Base のサブクラスを作成します。これを拡張クラスと呼びます。この拡張クラスを、 base 以下に存在する LDAP の G"
"roup オブジェクト群とマッピングしてみましょう。"

msgid ""
"```text\n"
"irb> class Group < ActiveLdap::Base\n"
"irb*   ldap_mapping\n"
"irb* end\n"
"```"
msgstr ""

msgid ""
"In the above code, Group class handles sub tree of `ou=Groups`\n"
"that is `:base` value specified by setup_connection. A instance\n"
"of Group class represents a LDAP object under `ou=Groups`."
msgstr ""
"簡単に説明しましょう。上記のコードでは Group クラスが setup_connection でした:base 以下の ou=Groups 以下のオブジェ"
"クト群全体を取り扱うようになります。Groupクラスのインスタンスは、ou=Groups 以下にある個々の LDAP オブジェクトを表現します。"

msgid "Here is the Group class in use:"
msgstr "これで、グループクラスは以下のように利用できます"

msgid ""
"```text\n"
"# Get all group names\n"
"irb> all_groups = Group.find(:all, '*').collect {|group| group.cn}\n"
"=> [\"root\", \"daemon\", \"bin\", \"sys\", \"adm\", \"tty\", ..., \"develop\"]"
msgstr ""

msgid ""
"# Get LDAP objects in develop group\n"
"irb> group = Group.find(\"develop\")\n"
"=> #<Group objectClass:<...> ...>"
msgstr ""

msgid ""
"# Get cn of the develop group\n"
"irb> group.cn\n"
"=> \"develop\""
msgstr ""

msgid ""
"# Get gid_number of the develop group\n"
"irb> group.gid_number\n"
"=> \"1003\"\n"
"```"
msgstr ""

msgid "That's it! No let's get back in to it."
msgstr "ほら！ もう元には戻れないでしょう？"

msgid "### Extension Classes"
msgstr "### ActiveLdap 拡張クラス"

msgid ""
"Extension classes are classes that are subclassed from ActiveLdap::Base.  They"
"\n"
"are used to represent objects in your LDAP server abstractly."
msgstr ""
"ActiveLdap 拡張クラスは ActiveLdap::Base のサブクラスです。これらは LDAP サーバ内のオブジェクトを抽象的に表現するために使"
"われます。"

msgid "#### Why do I need them?"
msgstr "#### どうしてこれが必要なのか？"

msgid ""
"Extension classes are what make ActiveLdap \"active\"! They do all the\n"
"background work to make easy-to-use objects by mapping the LDAP object's\n"
"attributes on to a Ruby class."
msgstr "拡張クラスは LDAP オブジェクト群の属性情報を Ruby クラスに自動的にマッピングすることで、オブジェクトの取り扱いを容易かつ便利にします。"

msgid "#### Special Methods"
msgstr "#### 拡張クラス定義用メソッド"

msgid ""
"I will briefly talk about each of the methods you can use when defining an\n"
"extension class.  In the above example, I only made one special method call\n"
"inside the Group class. More than likely, you will want to more than that."
msgstr ""
"LDAP オブジェクトが正しく Ruby オブジェクトにマッピングされるために、ActiveLdapのクラスメソッドを利用してマッピングのための情報を定義し"
"ます。上記の例ではそれらのうち、Group クラスを定義する中で ldap_mapping だけを利用していました。必要に応じて更に多くのメソッドを利用する"
"ことができます。"

msgid "##### `ldap_mapping`"
msgstr ""

msgid ""
"ldap_mapping is the only required method to setup an extension class for use\n"
"with ActiveLdap. It must be called inside of a subclass as shown above."
msgstr "ldap_mapping は ActiveLdap とともに拡張クラスを利用するにあたって必須とされる唯一のメソッドです。"

msgid "Below is a much more realistic Group class:"
msgstr "以下は ldap_mapping を更に詳細に記述した Group クラスです"

msgid ""
"```ruby\n"
"class Group < ActiveLdap::Base\n"
"  ldap_mapping :dn_attribute => 'cn',\n"
"               :prefix => 'ou=Groups', :classes => ['top', 'posixGroup'],\n"
"               :scope => :one\n"
"end\n"
"```"
msgstr ""

msgid ""
"As you can see, this method is used for defining how this class maps in to LDA"
"P.  Let's say that\n"
"my LDAP tree looks something like this:"
msgstr ""
"Group クラスをどのようにして LDAP とマッピングとするかを定義するために、ldap_mapping メソッドが使われていることが見てとれるでしょう"
"。\n"
"\n"
"私たちが扱う LDAP ツリーが以下のようなものであるとします。"

msgid ""
"```text\n"
"* dc=dataspill,dc=org\n"
"|- ou=People,dc=dataspill,dc=org\n"
"|+ ou=Groups,dc=dataspill,dc=org\n"
"  \\\n"
"   |- cn=develop,ou=Groups,dc=dataspill,dc=org\n"
"   |- cn=root,ou=Groups,dc=dataspill,dc=org\n"
"   |- ...\n"
"```"
msgstr ""

msgid ""
"Under ou=People I store user objects, and under ou=Groups, I store group\n"
"objects.  What `ldap_mapping` has done is mapped the class in to the LDAP tree"
"\n"
"abstractly. With the given `:dn_attributes` and `:prefix`, it will only work f"
"or\n"
"entries under `ou=Groups,dc=dataspill,dc=org` using the primary attribute 'cn'"
"\n"
"as the beginning of the distinguished name."
msgstr ""
"ou=People 以下にはユーザオブジェクトを格納し、ou=Groups 以下にはグループオブジェクトを格納するものとします。\n"
"\n"
"ldap_mapping は LDAP ツリーを抽象化して拡張クラスにマッピングします。以下では、先の Group クラスの例をとって説明します。\n"
"\n"
":prefix によって、このクラスはou=Groups,dc=dataspill,dc=org 以下のみを扱うようになっています。\n"
"\n"
":dn_attributeにより 'cn' がこのクラスにとってのプライマリ属性となります。つまり、Group クラスが取り扱う LDAPオブジェクト(ou"
"=Groups,dc=dataspill,dc=org 以下のLDAPオブジェクト)について、DN はcn から始まるものとして扱われます。"

msgid "Just for clarity, here's how the arguments map out:"
msgstr "より理解をはっきりさせるために、図にしてみましょう。各引数は図のようにマッピングされます。"

msgid ""
"```text\n"
" cn=develop,ou=Groups,dc=dataspill,dc=org\n"
" ^^         ^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^\n"
":dn_attribute |         |\n"
"            :prefix     |\n"
"              :base from setup_connection\n"
"```"
msgstr ""

msgid ""
"`:scope` tells ActiveLdap to only search under ou=Groups, and not to look deep"
"er\n"
"for dn_attribute matches.\n"
"(e.g. cn=develop,ou=DevGroups,ou=Groups,dc=dataspill,dc=org)\n"
"You can choose value from between :sub, :one and :base."
msgstr ""
"他にも :scope, :classes, :dn_attribute といったオプションの引数があります。:scope は ou=Groups 以下の検索"
"について、より深い階層までを検索するかどうかを指示します（cn=develop,ou=DevGroups,ou=Groups,dc=dataspill,dc"
"=org のような LDAP オブジェクトのこと）。"

msgid ""
"Something's missing: :classes.  :classes is used to tell ActiveLdap what\n"
"the minimum requirement is when creating a new object. LDAP uses objectClasses"
"\n"
"to define what attributes a LDAP object may have. ActiveLdap needs to know\n"
"what classes are required when creating a new object.  Of course, you can leav"
"e\n"
"that field out to default to ['top'] only.  Then you can let each application\n"
"choose what objectClasses their objects should have by calling the method e.g."
"\n"
"Group#add_class(*values)."
msgstr ""
":classes は ActiveLdap に対して、新しいオブジェクトを生成するのに必要な最低条件を指定します。LDAP はオブジェクトクラスを利用して、"
"LDAPオブジェクトがどのような属性を持ち得るかを定義します。ActiveLdap はこれを :classes 引数によって知ることになります。デフォルトは"
" 'top' のみです。このままにすることもできますし、add_class メソッドなどによって追加することも可能です。"

msgid ""
"Note that is can be very important to define the default :classes value. Due t"
"o\n"
"implementation choices with most LDAP servers, once an object is created, its\n"
"structural objectclasses may not be removed (or replaced).  Setting a sane def"
"ault\n"
"may help avoid programmer error later."
msgstr ""
"デフォルトの :classes の値はとても重要です。ほとんどの LDAP サーバは一度オブジェクトが造られると structual な objectCla"
"ss は削除（または変更）されることはないでしょう。健全なデフォルトを設定しておくことは、後々バグを作り込むことを回避する助けになるかもしれません。"

msgid ""
":classes isn't the only optional argument.  If :dn_attribute is left off,\n"
"it defaults to super class's value or 'cn'.  If :prefix is left off,\n"
"it will default to 'ou=PluralizedClassName'. In this\n"
"case, it would be 'ou=Groups'."
msgstr ""
":classes だけがオプションの引数ではありません。:dn_attribute が無い場合、このデフォルトはスーパークラスと同じ値か、cn に設定されま"
"す。\n"
"\n"
":prefixが無い場合、このデフォルトは'ou=クラス名の複数形’に設定されます。この場合は'ou=Groups'になります。"

msgid ""
":classes should be an Array. :dn_attribute should be a String and so should\n"
":prefix."
msgstr ":classes は配列でなくてはなりません。:dn_attribute と :prefix は文字列である必要があります。"

msgid "##### `belongs_to`"
msgstr ""

msgid ""
"This method allows an extension class to make use of other extension classes\n"
"tying objects together across the LDAP tree. Often, user objects will be\n"
"members of, or belong to, `Group` objects."
msgstr ""
"このメソッドはLDAPツリーを横断して他の拡張クラスとの関連付けを行い、所属を表現します。しばしば`User`オブジェクトは`Group`オブジェクトのメン"
"バーになったり、所属したりします。"

msgid ""
"```text\n"
"* dc=dataspill,dc=org\n"
"|+ ou=People,dc=dataspill,dc=org\n"
"\\\n"
" |- uid=drewry,ou=People,dc=dataspill,dc=org\n"
" |- ou=Groups,dc=dataspill,dc=org\n"
"```"
msgstr ""

msgid ""
"In the above tree, one such example would be user `drewry` who is a\n"
"part of the group `develop`. You can see this by looking at the\n"
"`memberUid` field of `develop`."
msgstr ""
"上記のようなLDAPツリーでは、`drewry`ユーザは`develop`グループの一員であるとします。この場合、`develop`グループの`member"
"Uid`フィールドを見ることで、それを確認できます。"

msgid ""
"```text\n"
"irb> develop = Group.find('develop')\n"
"=> ...\n"
"irb> develop.memberUid\n"
"=> ['drewry', 'builder']\n"
"```"
msgstr ""

msgid ""
"If we look at the LDAP entry for `drewry`, we do not see any\n"
"references to group `develop`. In order to remedy that, we can use\n"
"`belongs_to`:"
msgstr ""
"しかし、`drewry`のエントリを見た時に`develop`グループと関連している事はわからないでしょう。これを解決するために`belongs_to`を利"
"用します。"

msgid ""
"```text\n"
"irb> class User < ActiveLdap::Base\n"
"irb*   ldap_mapping :dn_attribute => 'uid', :prefix => 'ou=People', :classes ="
"> ['top','account']\n"
"irb*   belongs_to :groups, :class_name => 'Group', :many => 'memberUid', :prim"
"ary_key => 'uid'\n"
"irb* end\n"
"```"
msgstr ""

msgid ""
"Now, class `User` will have a method called `groups` which will\n"
"retrieve all `Group` objects that a user is in."
msgstr ""
"これで`User`クラスは`groups`メソッドを利用できるようになります。このメソッドはユーザーが所属するすべての`Group`オブジェクトを取得するこ"
"とができます。"

msgid ""
"```text\n"
"irb> me = User.find('drewry')\n"
"irb> me.groups\n"
"=>  #<ActiveLdap::Association::BelongsToMany...>    # Enumerable object\n"
"irb> me.groups.each { |group| p group.cn };nil\n"
"\"cdrom\"\n"
"\"audio\"\n"
"\"develop\"\n"
"=> nil\n"
"(Note: nil is just there to make the output cleaner...)\n"
"```"
msgstr ""

msgid ""
"TIP: If you weren't sure what the distinguished name attribute was for\n"
"`Group`, you could also do the following:"
msgstr ""
"TIP: もし`Group`のdistinguished nameの属性名を知らなくても、以下のようにすればdistinguished nameの値を取得で"
"きます。"

msgid ""
"```text\n"
"irb> me.groups.each { |group| p group.id };nil\n"
"\"cdrom\"\n"
"\"audio\"\n"
"\"develop\"\n"
"=> nil\n"
"```"
msgstr ""

msgid ""
"Now let's talk about the arguments of `belongs_to`. We use the\n"
"following code that extends `User` a bit:"
msgstr "`belongs_to`の引数について説明します。先ほどの`User`クラスを少し拡張した以下のコードを例にして説明します。"

msgid ""
"```ruby\n"
"class User < ActiveLdap::Base\n"
"  ldap_mapping :dn_attribute => 'uid', :prefix => 'People', :classes => ['top'"
",'account']"
msgstr ""

msgid ""
"  # Associate with all belonged groups\n"
"  belongs_to :groups, :primary_key => 'uid',\n"
"              :class_name => 'Group', :many => 'memberUid'"
msgstr ""

msgid ""
"  # Associate with primary belonged group\n"
"  belongs_to :primary_group, :foreign_key => 'gidNumber',\n"
"              :class_name => 'Group', :primary_key => 'gidNumber'\n"
"end\n"
"```"
msgstr ""

msgid ""
"The first argument is the name of the method you wish to create. In\n"
"this case, we created a method called `groups` and `primary_group`\n"
"using the symbols `:groups` and `:primary_group`. The next collection\n"
"of arguments are actually a `Hash` (as with `ldap_mapping`)."
msgstr ""
"`belongs_to`の最初の引数は作りたいメソッドの名前です。ここでは、`:groups`シンボルと`:primary_group`シンボルを使って、`"
"groups`メソッドと`primary_group`メソッドを作成しています。それ以降の引数は実際には（`ldap_mapping`のように）`Hash`"
"です。"

msgid ""
"To specify the `groups` association, we use the `:many` option.\n"
"`:many` is used if an object belongs to many objects. All of matched\n"
"objects are treated as belonged objects. `:many` sets the \"related object's\n"
"attribute name\" and `:primary_key` sets the \"own attribute name\".\n"
"If `:primary_key` is left off of the argument list, it is assumed to be the\n"
"`dn_attribute`. In the example, `uid` is specified explicitly but we\n"
"can omit it because `uid` is the default value."
msgstr ""
"`groups`関連を指定するために`:many`オプションを使います。オブジェクトが複数のオブジェクトに所属している場合は`:many`を使います。すべて"
"のマッチしたオブジェクトに所属していると処理されます。`:many`は「関連しているオブジェクトの属性名」を設定し、`:primary_key`は「自身の属"
"性名」を設定します。`:primary_key`を指定しない場合は`dn_attribute`を使います。この例では`uid`を明示的にしていますが省略可能"
"です。なぜなら`uid`がデフォルト値だからです。"

msgid ""
"Relation is resolved by searching entries of `:class_name` class\n"
"objects with `:many` attribute value. Search target attribute for it\n"
"is `:primary_key`. The `groups` method in the above example searches\n"
"`Group` objects with `User` object's `uid` value as `Group` object's\n"
"`memberUid` value."
msgstr ""
"`:many`で指定した属性の値を対象に`:class_name`で指定したクラスのオブジェクトを検索することで関連を解決します。この例の`groups`メ"
"ソッドでは`User`オブジェクトの`uid`属性の値と`Group`オブジェクトの`memberUid`属性の値を使って`Group`オブジェクトを検索し"
"ます。"

msgid ""
"When an object just belongs to an object, `:foreign_key` is used \n"
"instead of `:many` and the attributes swap meaning:\n"
"`:primary_key` specifies the \"related object's attribute name\" while\n"
"`:foreign_key` specifies the \"own attribute name\"."
msgstr ""
"オブジェクトが1つのオブジェクトにだけ所属するときは`:many`ではなく`:foreign_key`を使います。このとき、`:primary_key`が意"
"味することが変わります。つまり、`:primary_key`は「関連しているオブジェクトの属性名」を意味し、`:foreign_key`は「自身の属性名」を"
"意味します。"

msgid ""
"Relation is resolved by searching entries of `:class_name` class\n"
"objects with `:primary_key` attribute value. Search target attribute\n"
"for it is `:foreign_key`. The first matched object is treated as\n"
"the belonged object. The `primary_group` method in the above\n"
"example searches `Group` objects with `User` object's `gidNumber`\n"
"value as `Group` object's `gidNumber` value."
msgstr ""
"`:primary_key`で指定した属性の値を対象に`:class_name`で指定したクラスのオブジェクトを検索することで関連を解決します。検索対象の属"
"性名は`:foreign_key`になります。最初にマッチしたオブジェクトが所属するオブジェクトとして扱われます。この例の`primary_group`メソ"
"ッドでは`User`オブジェクトの`gidNumber`属性の値と`Group`オブジェクトの`gidNumber`属性の値を使って`Group`オブジェク"
"トを検索します。"

msgid ""
"`:class_name` should be a string that has the name of a class you've\n"
"already included. If your class is inside of a module, be sure to put\n"
"the whole name, e.g. `:class_name => \"MyLdapModule::Group\"`."
msgstr ""
"`:class_name`には、所属先となるオブジェクトのクラス名を`String`で指定します。もし、クラスがモジュールやクラスの中に定義されている場合、"
"`:class_name => \"MyLdapModule::Group\"`のようにトップレベルからすべての名前を記載してください。"

msgid "##### `has_many`"
msgstr ""

msgid ""
"This method is the opposite of belongs_to. Instead of checking other objects i"
"n\n"
"other parts of the LDAP tree to see if you belong to them, you have multiple\n"
"objects from other trees listed in your object. To show this, we can just\n"
"invert the example from above:"
msgstr ""
"このメソッドは belongs_to と対のものです。特定のオブジェクトに所属しているエントリを、所属されているオブジェクトからリスト可能にします。これを行"
"うにはbelongs_toとは逆のことをします。"

msgid ""
"```ruby\n"
"class Group < ActiveLdap::Base\n"
"  ldap_mapping :dn_attribute => 'cn', :prefix => 'ou=Groups', :classes => ['to"
"p', 'posixGroup']"
msgstr ""

msgid ""
"  # Associate with primary belonged users\n"
"  has_many :primary_members, :foreign_key => 'gidNumber',\n"
"           :class_name => \"User\", :primary_key => 'gidNumber'"
msgstr ""

msgid ""
"  # Associate with all belonged users\n"
"  has_many :members,  :wrap => \"memberUid\",\n"
"           :class_name => \"User\",  :primary_key => 'uid'\n"
"end\n"
"```"
msgstr ""

msgid ""
"Now we can see that group develop has user 'drewry' as a member, and it can\n"
"even return all responses in object form just like `belongs_to` methods."
msgstr ""
"これで develop グループが 'drewry' ユーザをメンバーとして見ることができます。belongs_to のように、メンバーのリストを memb"
"ers メソッドによって取得することができます。"

msgid ""
"```text\n"
"irb> develop = Group.find('develop')\n"
"=> ...\n"
"irb> develop.members\n"
"=> #<ActiveLdap::Association::HasManyWrap:..> # Enumerable object\n"
"irb> develop.members.map{|member| member.id}\n"
"=> [\"drewry\", \"builder\"]\n"
"```"
msgstr ""

msgid ""
"The arguments for `has_many` follow the exact same idea that `belongs_to`'s\n"
"arguments followed. :wrap's contents are used to search for matching\n"
"`:primary_key` content.  If `:primary_key` is not specified, it defaults to th"
"e\n"
"dn_attribute of the specified `:class_name`."
msgstr ""
"has_many の引数は belongs_to とまったく同じ形式をとります。つまり第一引数に実装するメソッド名を Symbol で渡し、続く引数は Ha"
"sh です。\n"
"\n"
":class_name、:parimary_key の意味合いも belongs_to と同様で、相手先の拡張クラス名と参照先の属性名を指定します。相手先が"
"所有先になるだけです。尚、 has_many に:many キーはありません。\n"
"\n"
"belonsg_to と違う点は、自身の関連性のキー属性を指定するオプションが二つあることです。:foreign_key か :wrap のいずれかで指定し"
"ます。\n"
"\n"
":foreign_key で属性名を指定した場合、has_many は単純に :class_name のクラスに対して検索を行い、マッチしたオブジェクト群を"
"所有オブジェクト群として扱います。\n"
"\n"
":wrap で指定した場合は挙動が変わります。:wrap の概念は”:wrap に指定した属性に保持する値をオブジェクト化する”ことです。\n"
"\n"
":wrap に指定する属性は、memberUid のように一つ以上の値を持つことを想定しています。この属性に保持する全ての値で検索し、マッチする全てのオブジ"
"ェクトを返します。マッチしない値がある場合、:class_name に指定の拡張クラスで new され、所有対象のリストに含まれます。"

msgid "### Using these new classes"
msgstr "### 拡張クラスの利用法"

msgid ""
"These new classes have many method calls. Many of them are automatically\n"
"generated to provide access to the LDAP object's attributes. Other were define"
"d\n"
"during class creation by special methods like `belongs_to`. There are a few ot"
"her\n"
"methods that do not fall in to these categories."
msgstr ""
"作成した拡張クラスは多くのメソッドコールを持ちます。それらのうちの多数は LDAPオブジェクトに対するアクセスを提供するために自動的に作成されています。他の"
"メソッドはクラス定義時、belongs_to のような特別なメソッドによって作成されます。以下ではそれら以外のメソッドについて記載します。"

msgid "#### `.find`"
msgstr ""

msgid ""
"`.find` is a class method that is accessible from\n"
"any subclass of Base that has 'ldap_mapping' called. When\n"
"called `.first(:first)` returns the first match of the given class."
msgstr ".find は ldap_mapping をコール済みの拡張クラスのクラスメソッドです。ActiveRecordのようにLDAPオブジェクトを検索可能です。"

msgid ""
"```text\n"
"irb> Group.find(:first, 'deve*\").cn\n"
"=> \"develop\"\n"
"```"
msgstr ""

msgid ""
"In this simple example, Group.find took the search string of 'deve*' and\n"
"searched for the first match in Group where the dn_attribute matched the\n"
"query. This is the simplest example of .find."
msgstr "文字列を与えると、dn_attribute をキーにして最初にマッチするオブジェクトを返します。"

msgid ""
"```text\n"
"irb> Group.find(:all).collect {|group| group.cn}\n"
"=> [\"root\", \"daemon\", \"bin\", \"sys\", \"adm\", \"tty\", ..., \"develop\"]\n"
"```"
msgstr ""

msgid ""
"Here .find(:all) returns all matches to the same query.  Both .find(:first) an"
"d\n"
".find(:all) also can take more expressive arguments:"
msgstr "最初のキーに :all を与えると全てのオブジェクトを返します。"

msgid ""
"```text\n"
"irb> Group.find(:all, :attribute => 'gidNumber', :value => '1003').collect {|g"
"roup| group.cn}\n"
"=> [\"develop\"]\n"
"```"
msgstr ""

msgid ""
"So it is pretty clear what :attribute and :value do - they are used to query a"
"s\n"
"`:attribute=:value`."
msgstr ":attribute と :value によって特定のキーについて検索することも可能です。"

msgid "If :attribute is unspecified, it defaults to the dn_attribute."
msgstr ":attribute が指定されない場合、:dn_attribute が利用されます。"

msgid ""
"It is also possible to override :attribute and :value by specifying :filter. T"
"his\n"
"argument allows the direct specification of a LDAP filter to retrieve objects "
"by."
msgstr ":filter によってLDAPフィルタを直接指定することも可能です。"

msgid "##### Using the :filter option"
msgstr ""

msgid ""
"The filter option lets you pass in an LDAP query string.\n"
"For example retrieving all groups with cn which starts with @'dev'@ and has @g"
"uid@ == 1:"
msgstr ""

msgid ""
"```text\n"
"irb> Group.find(:all, :filter => '(&(cn=dev*)(guid=1))').collect {|group| grou"
"p.cn}\n"
"=> [\"develop\"]\n"
"```"
msgstr ""

msgid ""
"It also allows a hash like sintax (sparing you the need to write the query by "
"hand ):"
msgstr ""

msgid ""
"```text\n"
"irb> Group.find(:all, :filter => {:cn => 'dev*', :guid => 1 }).collect {|group"
"| group.cn}\n"
"=> [\"develop\", \"developers\", \"sys\", \"sysadmin\"]\n"
"```"
msgstr ""

msgid ""
"You can build complex queries combining the hash syntax with arrays and @:or@ "
"and @:and@ operators retrieving all users whose name contains 'john' or cn end"
"s with 'smith' or contains 'liz'"
msgstr ""

msgid ""
"```text\n"
"irb> User.find(:all, filter: [:or, [:or, { :cn => '*smith', :name => '*john*'}"
" ], { cn: '*liz*' }]).collect(&:cn)\n"
"=> ['john.smith', 'jane.smith', 'john tha ripper', 'liz.taylor', ...]\n"
"```"
msgstr ""

msgid "#### .search"
msgstr ""

msgid ""
".search is a class method that is accessible from any subclass of Base, and Ba"
"se.\n"
"It lets the user perform an arbitrary search against the current LDAP connecti"
"on\n"
"irrespetive of LDAP mapping data.  This is meant to be useful as a utility met"
"hod\n"
"to cover 80% of the cases where a user would want to use Base.connection direc"
"tly."
msgstr ""
".search は ActiveLdap::Base か、そのサブクラスから呼び出し可能なクラスメソッドです。拡張クラスと LDAPツリーとのマッピングを無"
"視して検索することができます。直接Base.connection を利用してもよいですが、このメソッドを利用すれば8割の目的は達成できるでしょう。"

msgid ""
"```text\n"
"irb> Base.search(:base => 'dc=example,dc=com', :filter => '(uid=roo*)',\n"
"                 :scope => :sub, :attributes => ['uid', 'cn'])\n"
"=>  [[\"uid=root,ou=People,dc=dataspill,dc=org\",{\"cn\"=>[\"root\"], \"uidNumber\"=>["
"\"0\"]}]\n"
"```"
msgstr ""

msgid ""
"You can specify the :filter, :base, :scope, and :attributes, but they all have"
" defaults --\n"
"* :filter defaults to objectClass=* - usually this isn't what you want\n"
"* :base defaults to the base of the class this is executed from (as set in lda"
"p_mapping)\n"
"* :scope defaults to :sub. Usually you won't need to change it (You can choose"
" value also from between :one and :base)\n"
"* :attributes defaults to [] and is the list of attributes you want back. Empt"
"y means all of them."
msgstr ""

msgid "#### #valid?"
msgstr ""

msgid ""
"valid? is a method that verifies that all attributes that are required by the\n"
"objects current objectClasses are populated."
msgstr "valid? はインスタンスメソッドです。オブジェクトクラスで必要とされる属性が備わっているか検査します。真偽値を返します。"

msgid "#### #save"
msgstr ""

msgid ""
"save is a method that writes any changes to an object back to the LDAP server."
"\n"
"It automatically handles the addition of new objects, and the modification of\n"
"existing ones."
msgstr ""
"save は LDAP オブジェクトの変更を保存するためのインスタンスメソッドです。実行すると、レシーバのオブジェクトに加えられていた変更が LDAP サー"
"バに反映されます。新しいオブジェクトか、既存のオブジェクトかを自動判別し、新規オブジェクトならLDAPサーバに追加します。既存のものならば更新します。"

msgid "#### .exists?"
msgstr ""

msgid ""
"exists? is a simple method which returns true is the current object exists in\n"
"LDAP, or false if it does not."
msgstr "exists? はシンプルなクラスメソッドです。ある :dn_attribute を持つオブジェクトが存在するか検査したい時に利用します。"

msgid ""
"```text\n"
"irb> User.exists?(\"dshadsadsa\")\n"
"=> false\n"
"```"
msgstr ""

msgid "### ActiveLdap::Base"
msgstr ""

msgid ""
"ActiveLdap::Base has come up a number of times in the examples above.  Every\n"
"time, it was being used as the super class for the wrapper objects. While this"
"\n"
"is it's main purpose, it also handles quite a bit more in the background."
msgstr ""
"ActiveLdap::Base はこれまでの例の中で何回か登場してきました。主な目的としてLDAPオブジェクトをラップするために拡張クラスのスーパークラス"
"として活用しましたが、もう少しその背景を記載します。"

msgid "#### What is it?"
msgstr "#### これは何か"

msgid ""
"ActiveLdap::Base is the heart of ActiveLdap.  It does all the schema\n"
"parsing for validation and attribute-to-method mangling as well as manage the\n"
"connection to LDAP."
msgstr ""
"ActiveLdap::Base は ActiveLdap の心臓部です。属性を setter/getter にマッピングしたり、バリデーションを行うための"
"スキーマ解析を行います。同時に、LDAPサーバとの接続の管理も行います。"

msgid "##### setup_connection"
msgstr ""

msgid ""
"Base.setup_connection takes many (optional) arguments and is used to\n"
"connect to the LDAP server. Sometimes you will want to connect anonymously\n"
"and other times over TLS with user credentials. Base.setup_connection is\n"
"here to do all of that for you."
msgstr ""
"Base.setup_connection は LDAP サーバとの接続のために多くの引数をとります。多くはオプションの引数です。時に匿名接続を行いたいでし"
"ょうし、時にはユーザ証明とともにTLSを利用した接続をしたいでしょう。Base.setup_connection はそれらを実現します。"

msgid ""
"By default, if you call any subclass of Base, such as Group, it will call\n"
"Base.setup_connection() if these is no active LDAP connection. If your\n"
"server allows anonymous binding, and you only want to access data in a\n"
"read-only fashion, you won't need to call Base.setup_connection. Here\n"
"is a fully parameterized call:"
msgstr ""
"Group のような、Base を親に持つサブクラスをコールした際、まだ接続が確立していなければ、Base.setup_connection で設定した情報"
"をもとに接続しようと試みます。あなたのサーバが匿名バインドを許していて、かつ読み取り専用でのアクセスを行いたいのなら、多くを設定する必要はないでしょう。以下"
"にパラメータつきの setup_connection の例を示します。"

msgid ""
"```ruby\n"
"Base.setup_connection(\n"
"  :host => 'ldap.dataspill.org',\n"
"  :port => 389,\n"
"  :base => 'dc=dataspill,dc=org',\n"
"  :logger => logger_object,\n"
"  :bind_dn => \"uid=drewry,ou=People,dc=dataspill,dc=org\",\n"
"  :password_block => Proc.new { 'password12345' },\n"
"  :allow_anonymous => false,\n"
"  :try_sasl => false\n"
")\n"
"```"
msgstr ""

msgid ""
"There are quite a few arguments, but luckily many of them have safe defaults:\n"
"* :host defaults to \"127.0.0.1\".\n"
"* :port defaults to nil. 389 is applied if not specified. \n"
"* :bind_dn defaults to nil. anonymous binding is applied if not specified.\n"
"* :logger defaults to a Logger object that prints fatal messages to stderr\n"
"* :password_block defaults to nil\n"
"* :allow_anonymous defaults to true\n"
"* :try_sasl defaults to false - see Advanced Topics for more on this one."
msgstr ""

msgid ""
"Most of these are obvious, but I'll step through them for completeness:\n"
"* :host defines the LDAP server hostname to connect to.\n"
"* :port defines the LDAP server port to connect to.\n"
"* :method defines the type of connection - :tls, :ssl, :plain\n"
"* :base specifies the LDAP search base to use with the prefixes defined in all"
"\n"
"  subclasses.\n"
"* :bind_dn specifies what your server expects when attempting to bind with\n"
"  credentials.\n"
"* :logger accepts a custom logger object to integrate with any other logging\n"
"  your application uses.\n"
"* :password_block, if defined, give the Proc block for acquiring the password\n"
"* :password, if defined, give the user's password as a String\n"
"* :store_password indicates whether the password should be stored, or if used\n"
"  whether the :password_block should be called on each reconnect.\n"
"* :allow_anonymous determines whether anonymous binding is allowed if other\n"
"  bind methods fail\n"
"* :try_sasl, when true, tells ActiveLdap to attempt a SASL-GSSAPI bind\n"
"* :sasl_quiet, when true, tells the SASL libraries to not spew messages to STD"
"OUT\n"
"* :sasl_options, if defined, should be a hash of options to pass through. This"
" currently only works with the ruby-ldap adapter, which currently only support"
"s :realm, :authcid, and :authzid.\n"
"* :retry_limit - indicates the number of attempts to reconnect that will be un"
"dertaken when a stale connection occurs. -1 means infinite.\n"
"* :retry_wait - seconds to wait before retrying a connection\n"
"* :scope - dictates how to find objects. (Default: :one)\n"
"* :timeout - time in seconds - defaults to disabled. This CAN interrupt search"
"() requests. Be warned.\n"
"* :retry_on_timeout - whether to reconnect when timeouts occur. Defaults to tr"
"ue\n"
"See lib/configuration.rb(ActiveLdap::Configuration::DEFAULT_CONFIG) for defaul"
"ts for each option"
msgstr ""

msgid ""
"Base.setup_connection just setups connection\n"
"configuration. A connection is connected and bound when it\n"
"is needed. It follows roughly the following approach:"
msgstr ""
"Base.setup_connection は接続の設定のみを行います。実際にLDAPサーバに接続しバインドするプロセスは必要になったときに一度に実施されま"
"す。だいたい、以下のようなアプローチを取ります"

msgid "* Connect to host:port using :method"
msgstr "* host:port にたいして、:method での接続を行います"

msgid ""
"* If bind_dn and password_block/password, attempt to bind with credentials.\n"
"* If that fails or no password_block and anonymous allowed, attempt to bind\n"
"  anonymously.\n"
"* If that fails, error out."
msgstr ""

msgid ""
"On connect, the configuration options passed in are stored\n"
"in an internal class variable which is used to cache the\n"
"information without ditching the defaults passed in from\n"
"configuration.rb"
msgstr "接続の際、渡された設定オプションはクラス変数の中に格納されます。このさい、指定されていないオプションはデフォルト値が適用されます。"

msgid "##### connection"
msgstr ""

msgid "Base.connection returns the ActiveLdap::Connection object."
msgstr "Base.connection は ActiveLdasp::Connection オブジェクトを返します"

msgid "### Exceptions"
msgstr "### 例外クラス"

msgid "There are a few custom exceptions used in ActiveLdap. They are detailed below."
msgstr "ActiveLdap は幾つかのカスタマイズした例外クラスを扱います。以下にそれを示します。"

msgid "#### DeleteError"
msgstr ""

msgid ""
"This exception is raised when #delete fails. It will include LDAP error\n"
"information that was passed up during the error."
msgstr "LDAPオブジェクトの削除に失敗した際、この例外が発生します。エラー発生時の LDAP エラーメッセージが含まれます。"

msgid "#### SaveError"
msgstr ""

msgid ""
"This exception is raised when there is a problem in #save updating or creating"
"\n"
"an LDAP entry.  Often the error messages are cryptic. Looking at the server\n"
"logs or doing an \"Wireshark\":http://www.wireshark.org dump of the connection w"
"ill\n"
"often provide better insight."
msgstr ""
"LDAP オブジェクトの追加または更新に問題があった場合に発生する例外です。LDAPサーバのログや WireShark などによる通信解析によってより詳しい"
"情報が得られるかもしれません。"

msgid "#### AuthenticationError"
msgstr ""

msgid ""
"This exception is raised during Base.setup_connection if no valid authenticati"
"on methods\n"
"succeeded."
msgstr "この例外は setup_connection で :method による指定された認証が成功しなかった場合に発生します。"

msgid "#### ConnectionError"
msgstr ""

msgid ""
"This exception is raised during Base.setup_connection if no valid\n"
"connection to the LDAP server could be created. Check you \n"
"Base.setup_connection arguments, and network connectivity! Also check\n"
"your LDAP server logs to see if it ever saw the request."
msgstr ""
"この例外は setup_connection で指定された接続が確立できなかった場合に発生します。setup_connection のパラメータや、ネットワ"
"ークの導通を確認してみてください。ちゃんとリクエストが投げられている場合、LDAPサーバのログも確認してみてください。"

msgid "#### ObjectClassError"
msgstr ""

msgid ""
"This exception is raised when an object class is used that is not defined\n"
"in the schema."
msgstr "この例外は、LDAPサーバのスキーマ上で定義されていないオブジェクトクラスを利用した場合に発生します。"

msgid "### Others"
msgstr "### その他"

msgid ""
"Other exceptions may be raised by the Ruby/LDAP module, or by other subsystems"
".\n"
"If you get one of these exceptions and think it should be wrapped, write me an"
"\n"
"email and let me know where it is and what you expected. For faster results,\n"
"email a patch!"
msgstr ""
"その他の例外は Ruby/LDAP モジュールか、さらに別のサブシステムから発生します。もしあなたがそれらの例外を受け取り、ActiveLdap の例外によ"
"りラップされるべきだと考えたら、あなたが何を期待しているかをメールで教えてください。早く結果を出したい場合、メールにパッチを添付してください。"

msgid "### Putting it all together"
msgstr "### 実際に動作するサンプルコード"

msgid ""
"Now that all of the components of ActiveLdap have been covered, it's time\n"
"to put it all together! The rest of this section will show the steps to setup\n"
"example user and group management scripts for use with the LDAP tree described"
"\n"
"above."
msgstr ""
"ここまでで ActiveLdap のすべてのコンポーネントについて記述しました。さあ、実際に動作するコードを配置するときです！ 以降では、いままで例に挙げて"
"きた LDAP ツリー上の、ユーザとグループを管理するためのスクリプトを順番にセットアップしてきます。"

msgid "All of the scripts here are in the package's examples/ directory."
msgstr "以下に示すサンプルコードは、ActiveLdap ライブラリの examples/ ディレクトリにも配置されています。"

msgid "#### Setting up"
msgstr "#### 準備"

msgid "Create directory for scripts."
msgstr "まず必要なディレクトリを作成します"

msgid ""
"```console\n"
"% mkdir -p ldapadmin/objects\n"
"```"
msgstr ""

msgid "In ldapadmin/objects/ create the file user.rb:"
msgstr "次に、ldapadin/objects/user.rb を作成します。コードは以下のようにしてください。"

msgid ""
"```ruby\n"
"require 'objects/group'"
msgstr ""

msgid ""
"class User < ActiveLdap::Base\n"
"  ldap_mapping :dn_attribute => 'uid', :prefix => 'ou=People', :classes => ['p"
"erson', 'posixAccount']\n"
"  belongs_to :groups, :class_name => 'Group', :many => 'memberUid'\n"
"end\n"
"```"
msgstr ""

msgid "In ldapadmin/objects/ create the file group.rb:"
msgstr "同様に、ldapadmin/objects/group.rb を作成します。"

msgid ""
"```ruby\n"
"class Group < ActiveLdap::Base\n"
"  ldap_mapping :classes => ['top', 'posixGroup'], :prefix => 'ou=Groups'\n"
"  has_many :members, :class_name => \"User\", :wrap => \"memberUid\"\n"
"  has_many :primary_members, :class_name => 'User', :foreign_key => 'gidNumber"
"', :primary_key => 'gidNumber'\n"
"end\n"
"```"
msgstr ""

msgid "Now, we can write some small scripts to do simple management tasks."
msgstr "これでシンプルな管理タスクのためのスクリプトを書けるようになりました。"

msgid "#### Creating LDAP entries"
msgstr ""

msgid "Now let's create a really dumb script for adding users - ldapadmin/useradd:"
msgstr "早速ユーザを追加するための ldapadmin/useradd スクリプトを作成しましょう。"

msgid ""
"```ruby\n"
"#!/usr/bin/ruby -W0"
msgstr ""

msgid ""
"base = File.expand_path(File.join(File.dirname(__FILE__), \"..\"))\n"
"$LOAD_PATH << File.join(base, \"lib\")\n"
"$LOAD_PATH << File.join(base, \"examples\")"
msgstr ""

msgid ""
"require 'rubygems'\n"
"require 'active_ldap'\n"
"require 'objects/user'\n"
"require 'objects/group'"
msgstr ""

msgid ""
"argv, opts, options = ActiveLdap::Command.parse_options do |opts, options|\n"
"  opts.banner += \" USER_NAME CN UID\"\n"
"end"
msgstr ""

msgid ""
"if argv.size == 3\n"
"  name, cn, uid = argv\n"
"else\n"
"  $stderr.puts opts\n"
"  exit 1\n"
"end"
msgstr ""

msgid ""
"pwb = Proc.new do |user|\n"
"  ActiveLdap::Command.read_password(\"[#{user}] Password: \")\n"
"end"
msgstr ""

msgid ""
"ActiveLdap::Base.setup_connection(:password_block => pwb,\n"
"                                  :allow_anonymous => false)"
msgstr ""

msgid ""
"if User.exists?(name)\n"
"  $stderr.puts(\"User #{name} already exists.\")\n"
"  exit 1\n"
"end"
msgstr ""

msgid ""
"user = User.new(name)\n"
"user.add_class('shadowAccount')\n"
"user.cn = cn\n"
"user.uid_number = uid\n"
"user.gid_number = uid\n"
"user.home_directory = \"/home/#{name}\"\n"
"user.sn = \"somesn\"\n"
"unless user.save\n"
"  puts \"failed\"\n"
"  puts user.errors.full_messages\n"
"  exit 1\n"
"end\n"
"```"
msgstr ""

msgid "#### Managing LDAP entries"
msgstr ""

msgid "Now let's create another dumb script for modifying users - ldapadmin/usermod:"
msgstr "次に、ユーザの属性変更スクリプト ldapadmin/usermod を作成します。"

msgid ""
"unless User.exists?(name)\n"
"  $stderr.puts(\"User #{name} doesn't exist.\")\n"
"  exit 1\n"
"end"
msgstr ""

msgid ""
"user = User.find(name)\n"
"user.cn = cn\n"
"user.uid_number = uid\n"
"user.gid_number = uid\n"
"unless user.save\n"
"  puts \"failed\"\n"
"  puts user.errors.full_messages\n"
"  exit 1\n"
"end\n"
"```"
msgstr ""

msgid "#### Removing LDAP entries"
msgstr ""

msgid "Now let's create more one for deleting users - ldapadmin/userdel:"
msgstr "最後に、ユーザ削除のためのスクリプト ldapadmin/userdel を作成します。"

msgid ""
"argv, opts, options = ActiveLdap::Command.parse_options do |opts, options|\n"
"  opts.banner += \" USER_NAME\"\n"
"end"
msgstr ""

msgid ""
"if argv.size == 1\n"
"  name = argv.shift\n"
"else\n"
"  $stderr.puts opts\n"
"  exit 1\n"
"end"
msgstr ""

msgid ""
"User.destroy(name)\n"
"```"
msgstr ""

msgid "### Advanced Topics"
msgstr "### 高度な話題"

msgid "Below are some situation tips and tricks to get the most out of ActiveLdap."
msgstr "以降では、ActiveLdap を最大限に生かすために、さまざまなシチュエーションで役立つテクニックを紹介していきます。"

msgid "#### Binary data and other subtypes"
msgstr "#### バイナリデータとサブタイプ"

msgid ""
"Sometimes, you may want to store attributes with language specifiers, or\n"
"perhaps in binary form.  This is (finally!) fully supported.  To do so,\n"
"follow the examples below:"
msgstr ""
"しばしば、あなたは属性に言語指定子を指定して値を格納したくなるでしょう。それにバイナリデータ形式で投入したいかもしれません。これは十分にサポートされています"
"。例を見てみましょう。"

msgid ""
"```text\n"
"irb> user = User.new('drewry')\n"
"=> ...\n"
"# This adds a cn entry in lang-en and whatever the server default is.\n"
"irb> user.cn = [ 'wad', {'lang-en' => ['wad', 'Will Drewry']} ]\n"
"=> ...\n"
"irb> user.cn\n"
"=> [\"wad\", {\"lang-en-us\" => [\"wad\", \"Will Drewry\"]}]\n"
"# Now let's add a binary X.509 certificate (assume objectClass is correct)\n"
"irb> user.user_certificate = File.read('example.der')\n"
"=> ...\n"
"irb> user.save\n"
"```"
msgstr ""

msgid ""
"So that's a lot to take in. Here's what is going on. I just set the LDAP\n"
"object's cn to \"wad\" and cn:lang-en-us to [\"wad\", \"Will Drewry\"].\n"
"Anytime a LDAP subtype is required, you must encapsulate the data in a Hash."
msgstr ""
"この例には見るべき点が多くあります。順番に見てみましょう。例では、cn に\"wad\"と cn;lang-en-us に [\"wad\", \"Will Drew"
"ry\"] を追加しています。LDAP属性のサブタイプが必要とされるとき、それらのデータは Hash で包む必要があります。"

msgid ""
"But wait a minute, I just read in a binary certificate without wrapping it up."
"\n"
"So any binary attribute _that requires ;binary subtyping_ will automagically\n"
"get wrapped in @{'binary' => value}@ if you don't do it. This keeps your #writ"
"es\n"
"from breaking, and my code from crying.  For correctness, I could have easily\n"
"done the following:"
msgstr ""
"一方で、上記の例では Hash に包まずに X.509 証明書を格納しました。バイナリデータを格納するいくつかのの属性は `{'binary' => val"
"ue}`が必要です。これらの属性に対しては、プログラマがそうしなくても、自動で `{'binary' => value}` の Hash で包まれます。これ"
"はコーディングの助けになりますが、正確性のために明示的に Hash で包むことも可能です。"

msgid ""
"```text\n"
"irb> user.user_certificate = {'binary' => File.read('example.der')}\n"
"```"
msgstr ""

msgid ""
"You should note that some binary data does not use the binary subtype all the "
"time.\n"
"One example is jpegPhoto. You can use it as jpegPhoto;binary or just as jpegPh"
"oto.\n"
"Since the schema dictates that it is a binary value, ActiveLdap will write\n"
"it as binary, but the subtype will not be automatically appended as above. The"
"\n"
"use of the subtype on attributes like jpegPhoto is ultimately decided by the\n"
"LDAP site policy and not by any programmatic means."
msgstr ""
"バイナリデータを格納する場合であっても、必ずしも ;binary サブタイプを利用する訳ではないことに注意してください。例としては jpegPhoto があ"
"ります。あなたはjpegPhoto;binaryか jpegPhoto を利用することができます。スキーマがバイナリ値だと指示するので ActiveLdap"
" はバイナリ値として書き込むでしょうが、サブタイプは自動的には付与されません。jpegPhoto のような属性にサブタイプを利用するかどうかは、LDAPのサ"
"イトポリシーによって決められることであって、プログラムが自動で判断できるものではありません。（訳注：userCertificate 属性については、RFC上"
"で ;binary サブタイプを利用するよう指示されているため、自動的に ;binary 属性を付与できる一方、jpegPhoto についてそのような言及が"
" RFC 上にないために、そのような対応を自動的に行うことは難しい、ということのようです）"

msgid ""
"The only subtypes defined in LDAPv3 are lang-* and binary.  These can be neste"
"d\n"
"though:"
msgstr ""
"LDAPv3 で唯一定義されているサブタイプが lang-* と binary の組み合わせです。これらは以下のように Hash をネストさせることで実現で"
"きます。"

msgid ""
"```text\n"
"irb> user.cn = [{'lang-ja' => {'binary' => 'some Japanese'}}]\n"
"```"
msgstr ""

msgid ""
"As I understand it, OpenLDAP does not support nested subtypes, but some\n"
"documentation I've read suggests that Netscape's LDAP server does. I only\n"
"have access to OpenLDAP. If anyone tests this out, please let me know how it\n"
"goes!"
msgstr ""
"ネストされたサブタイプは OpenLDAP でサポートされていません。ですが、いくつかの文書を確認したところ、ネットスケープの LDAP サーバは対応してい"
"るようです。私がアクセスしたのは OpenLDAP のみなので、どなたかこの機能をテストしたなら、どのように動作したかを連絡してもらえると助かります。"

msgid "And that pretty much wraps up this section."
msgstr "このセクションの他の項目についても同様です。どのように動作したか連絡もらえると助かります。"

msgid "#### Further integration with your environment aka namespacing"
msgstr "#### 環境とのさらなる統合 - 別名 名前空間の構築"

msgid ""
"If you want this to cleanly integrate into your system-wide Ruby include path,"
"\n"
"you should put your extension classes inside a custom module."
msgstr "ActiveLdap を Ruby のインクルードパスに統合したいなら、拡張クラスをカスタムモジュールの中に統合するとよいでしょう。"

msgid "Example:"
msgstr "例:"

msgid "./myldap.rb:"
msgstr ""

msgid ""
"```ruby\n"
"require 'active_ldap'\n"
"require 'myldap/user'\n"
"require 'myldap/group'\n"
"module MyLDAP\n"
"end\n"
"```"
msgstr ""

msgid "./myldap/user.rb:"
msgstr ""

msgid ""
"```ruby\n"
"module MyLDAP\n"
"  class User < ActiveLdap::Base\n"
"    ldap_mapping :dn_attribute => 'uid', :prefix => 'ou=People', :classes => ["
"'top', 'account', 'posixAccount']\n"
"    belongs_to :groups, :class_name => 'MyLDAP::Group', :many => 'memberUid'\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid "./myldap/group.rb:"
msgstr ""

msgid ""
"```ruby\n"
"module MyLDAP\n"
"  class Group < ActiveLdap::Base\n"
"    ldap_mapping :classes => ['top', 'posixGroup'], :prefix => 'ou=Groups'\n"
"    has_many :members, :class_name => 'MyLDAP::User', :wrap => 'memberUid'\n"
"    has_many :primary_members, :class_name => 'MyLDAP::User', :foreign_key => "
"'gidNumber', :primary_key => 'gidNumber'\n"
"  end\n"
"end\n"
"```"
msgstr ""

msgid "Now in your local applications, you can call"
msgstr "こうすれば、あなたのアプリケーションでは以下のように呼び出すことができます。"

msgid ""
"```ruby\n"
"require 'myldap'"
msgstr ""

msgid ""
"MyLDAP::Group.new('foo')\n"
"...\n"
"```"
msgstr ""

msgid "and everything should work well."
msgstr "すべてのクラスは正しく動作するでしょう。"

msgid "#### force array results for single values"
msgstr "#### 単一内容の属性に対する getter アクセスであっても、配列で返すようにする"

msgid ""
"Even though ActiveLdap attempts to maintain programmatic ease by\n"
"returning Array values only. By specifying 'true' as an argument to\n"
"any attribute method you will get back a Array if it is single value.\n"
"Here's an example:"
msgstr "属性メソッドの引数に true を渡すことで、その属性の中身が単一の内容であっても配列で返すように挙動を変更することができます。"

msgid ""
"```text\n"
"irb> user = User.new('drewry')\n"
"=> ...\n"
"irb> user.cn(true)\n"
"=> [\"Will Drewry\"]\n"
"```"
msgstr ""

msgid "#### Dynamic attribute crawling"
msgstr "#### 動的な属性のクローリング"

msgid ""
"If you use tab completion in irb, you'll notice that you /can/ tab complete th"
"e dynamic\n"
"attribute methods. You can still see which methods are for attributes using\n"
"Base#attribute_names:"
msgstr ""
"IRBでタブ補完機能を有効にしている場合、属性アクセサメソッドをタブ補完で呼び出すことができます。また、Base#attribute_names メソッドを"
"利用すれば属性アクセサメソッドの一覧を得ることが可能です。"

msgid ""
"```text\n"
"irb> d = Group.new('develop')\n"
"=> ...\n"
"irb> d.attribute_names\n"
"=> [\"gidNumber\", \"cn\", \"memberUid\", \"commonName\", \"description\", \"userPassword"
"\", \"objectClass\"]\n"
"```"
msgstr ""

msgid "#### Juggling multiple LDAP connections"
msgstr "#### 複数の LDAP 接続の切り替え"

msgid ""
"In the same vein as the last tip, you can use multiple LDAP connections by\n"
"per class as follows:"
msgstr "最後に、クラスごとに別々の LDAP コネクションを利用するには、以下のようにしてください。"

msgid ""
"```text\n"
"irb> anon_class = Class.new(Base)\n"
"=> ...\n"
"irb> anon_class.setup_connection\n"
"=> ...\n"
"irb> auth_class = Class.new(Base)\n"
"=> ...\n"
"irb> auth_class.setup_connection(:password_block => lambda{'mypass'})\n"
"=> ...\n"
"```"
msgstr ""

msgid "This can be useful for doing authentication tests and other such tricks."
msgstr "これは認証のテストなどに有効です。"

msgid "#### :try_sasl"
msgstr ""

msgid ""
"If you have the Ruby/LDAP package with the SASL/GSSAPI patch from Ian\n"
"MacDonald's web site, you can use Kerberos to bind to your LDAP server. By\n"
"default, :try_sasl is false."
msgstr ":try_sasl を利用することによって LDAP サーバとのバインドに Kerberos を利用することができます。"

msgid ""
"Also note that you must be using OpenLDAP 2.1.29 or higher to use SASL/GSSAPI\n"
"due to some bugs in older versions of OpenLDAP."
msgstr "またこの場合、OpenLDAP 2.1.29 かそれ以上が必要です。それ以前のバージョンには多数のバグが残っています。"

msgid "#### Don't be afraid! [Internals]"
msgstr "#### こわがらないでください！"

msgid ""
"Don't be afraid to add more methods to the extensions classes and to\n"
"experiment. That's exactly how I ended up with this package. If you come up\n"
"with something cool, please share it!"
msgstr ""
"更にメソッドを追加することや、拡張クラスを定義することや、実験することを恐れないでください。私にとってこのパッケージの作成は一区切りつきましたが、もしクール"
"な何かをあなたが見つけたなら、それを共有させてください！"

msgid ""
"The internal structure of ActiveLdap::Base, and thus all its subclasses, is\n"
"still in flux. I've tried to minimize the changes to the overall API, but\n"
"the internals are still rough around the edges."
msgstr ""
"ActiveLdap::Base やそのサブクラスの構造は、まだ不安定です。外側の API については最小の変化で済ませてきましたが、内部についてはまだ荒削"
"りです。"

msgid "##### Where's ldap_mapping data stored? How can I get to it?"
msgstr "ldap_mapping データはどこに保存されていますか？ それらはどうやって取得しますか？"

msgid ""
"When you call ldap_mapping, it overwrites several class methods inherited\n"
"from Base:\n"
"* Base.base()\n"
"* Base.required_classes()\n"
"* Base.dn_attribute()"
msgstr "ldap_mapping をコールしたとき、ActiveLdap::Base のいくつかのクラスメソッドがオーバーライドされます。以下のメソッドです。"

msgid ""
"You can access these from custom class methods by calling MyClass.base(),\n"
"or whatever. There are predefined instance methods for getting to these\n"
"from any new instance methods you define:\n"
"* Base#base()\n"
"* Base#required_classes()\n"
"* Base#dn_attribute()"
msgstr ""
"これらのクラスメソッドに MyClass.base() のようにアクセスすることができます。インスタンスからもこれらの情報を知るために、拡張クラスのインスタ"
"ンスメソッドに以下のような定義済みメソッドが用意されています。"

msgid "##### What else?"
msgstr "##### その他の話題"

msgid ""
"Well if you want to use the LDAP connection for anything, I'd suggest still\n"
"calling Base.connection to get it. There really aren't many other internals\n"
"that need to be worried about.  You could get the LDAP schema with\n"
"Base.schema."
msgstr ""
"もしあなたが何らかの理由で LDAP コネクションを扱いたいなら、それを取得するためにActiveLdap::Base.connection メソッドをコー"
"ルすることを今のところ提案します。他の内部機構で接続を扱うものは少ないです。スキーマの情報についてはActiveLdap::Base.schema メソッド"
"により取得できます。"

msgid ""
"The only other useful tricks are dereferencing and accessing the stored\n"
"data. Since LDAP attributes can have multiple names, e.g. cn or commonName,\n"
"any methods you write might need to figure it out. I'd suggest just\n"
"calling self[attribname] to get the value, but if that's not good enough,\n"
"you can call look up the stored name by #to_real_attribute_name as follows:"
msgstr ""
"残りの便利な機能は、格納されたデータをいろんな名前でアクセスできることです。LDAP属性はcn / commonName のように複数の名前を持つことができ"
"るるので、どの名前でも同じ値にアクセスすることになります。値を取得するときは self['どれかの属性名'] とすることをオススメします。もし、これだけでは"
"十分ではない場合は、本当の属性名を得るためにto_real_attribute_name プライベートメソッドを利用することができます。"

msgid ""
"```text\n"
"irb> User.find(:first).instance_eval do\n"
"irb>   to_real_attribute_name('commonName')\n"
"irb> end\n"
"=> 'cn'\n"
"```"
msgstr ""

msgid ""
"This tells you the name the attribute is stored in behind the scenes (@data).\n"
"Again, self[attribname] should be enough for most extensions, but if not,\n"
"it's probably safe to dabble here."
msgstr ""
"このメソッドは背後（@data）で属性データが格納されている名前をあなたに教えます。再び、self[属性名] はほとんどの拡張に対して十分でなくてはなりませ"
"んが、そうでなくても、たぶんここでは問題にならないでしょう。"

msgid ""
"Also, if you like to look up all aliases for an attribute, you can call the\n"
"following:"
msgstr "また例えば、ユーザクラスの属性名のエイリアスを見つけるためには以下のようにするとよいでしょう。"

msgid ""
"```text\n"
"irb> User.schema.attribute_type 'cn', 'NAME'\n"
"=> [\"cn\", \"commonName\"]\n"
"```"
msgstr ""

msgid "This is discovered automagically from the LDAP server's schema."
msgstr "これはLDAP サーバのスキーマから自動的に発見します。"

msgid "## Limitations"
msgstr "## 制限"

msgid "### Speed"
msgstr "### 実行速度"

msgid ""
"Currently, ActiveLdap could be faster.  I have some recursive type\n"
"checking going on which slows object creation down, and I'm sure there\n"
"are many, many other places optimizations can be done.  Feel free\n"
"to send patches, or just hang in there until I can optimize away the\n"
"slowness."
msgstr ""
"今のところ、ActiveLdap はまだ高速にできます。いくつかの再帰的な型チェックをオブジェクト作成時に行っており、それらがオブジェクトの生成速度を落とし"
"ています。また、他のところでも多数の最適化が可能であることも認識しています。最適化できていない部分については私が最適化できるようになるまで我慢してもらうか、"
"または気軽にパッチを送ってください。"

msgid "## Feedback"
msgstr "## フィードバック"

msgid ""
"Any and all feedback and patches are welcome. I am very excited about this\n"
"package, and I'd like to see it prove helpful to more people than just myself."
msgstr ""
"どんなものでも、またすべてのフィードバックやパッチを歓迎します。私はこのパッケージについて興奮しています。また、私以上に、人々の助けになることを見たいと思っ"
"ています。"

msgid "Returns list of ancestors, starting from parent until root."
msgstr ""

# ActiveLdap::Acts::Tree#ancestors
msgid "  subchild1.ancestors # => [child1, root]"
msgstr ""

msgid "Returns the root node of the tree."
msgstr ""

msgid "Returns all siblings of the current node."
msgstr ""

# ActiveLdap::Acts::Tree#siblings
msgid "  subchild1.siblings # => [subchild2]"
msgstr ""

msgid "Returns all siblings and a reference to the current node."
msgstr ""

# ActiveLdap::Acts::Tree#self_and_siblings
msgid "  subchild1.self_and_siblings # => [subchild1, subchild2]"
msgstr ""

# @return [Base]
msgid "a new instance of Base"
msgstr ""

# ActiveLdap::Adapter::Base#reconnect
msgid ""
"Attempts to reconnect up to the number of times allowed\n"
"If forced, try once then fail with ConnectionError if not connected."
msgstr ""

# ActiveLdap::Adapter::Base#can_reconnect?
msgid ""
"Determine if we have exceed the retry limit or not.\n"
"True is reconnecting is allowed - False if not."
msgstr ""

# ActiveLdap::Adapter::JndiConnection::ModifyRecord#type
# ActiveLdap::Ldif::ChangeRecord::Control#type
# ActiveLdap::Ldif::ModifyRecord::Operation#type
msgid "Returns the value of attribute type."
msgstr ""

# ActiveLdap::Adapter::JndiConnection::ModifyRecord#name
# ActiveLdap::Schema::Entry#name
# ActiveLdap::UnknownAttribute#name
msgid "Returns the value of attribute name."
msgstr ""

# ActiveLdap::Adapter::JndiConnection::ModifyRecord#values
msgid "Returns the value of attribute values."
msgstr ""

# @return [ModifyRecord]
msgid "a new instance of ModifyRecord"
msgstr ""

# @return [JndiConnection]
msgid "a new instance of JndiConnection"
msgstr ""

# @return [Mod]
msgid "a new instance of Mod"
msgstr ""

# @return [Entry]
msgid "a new instance of Entry"
msgstr ""

# @return [Proxy]
msgid "a new instance of Proxy"
msgstr ""

msgid "Associations"
msgstr ""

# ActiveLdap::Associations
msgid ""
"Associations provides the class methods needed for\n"
"the extension classes to create methods using\n"
"belongs_to and has_many"
msgstr ""

msgid "belongs_to"
msgstr ""

# ActiveLdap::Associations::ClassMethods#belongs_to
msgid ""
"This defines a method for an extension class map its DN key\n"
"attribute value on to multiple items which reference it by\n"
"|:foreign_key| in the other LDAP entry covered by class\n"
"|:class_name|."
msgstr ""

msgid ""
"Example:\n"
" belongs_to :groups, :class_name => \"Group\",\n"
"            :many => \"memberUid\" # Group#memberUid\n"
"            # :primary_key => \"uid\" # User#uid\n"
"            # dn attribute value is used by default\n"
" belongs_to :primary_group, :class_name => \"Group\",\n"
"            :foreign_key => \"gidNumber\", # User#gidNumber\n"
"            :primary_key => \"gidNumber\"  # Group#gidNumber"
msgstr ""
"例：\n"
" belongs_to :groups, :class_name => \"Group\",\n"
"            :many => \"memberUid\" # Group#memberUid\n"
"            # :primary_key => \"uid\" # User#uid\n"
"            # dn attribute value is used by default\n"
" belongs_to :primary_group, :class_name => \"Group\",\n"
"            :foreign_key => \"gidNumber\", # User#gidNumber\n"
"            :primary_key => \"gidNumber\"  # Group#gidNumber"

msgid "has_many"
msgstr ""

# ActiveLdap::Associations::ClassMethods#has_many
msgid ""
"This defines a method for an extension class expand an\n"
"existing multi-element attribute into ActiveLdap objects.\n"
"This discards any calls which result in entries that\n"
"don't exist in LDAP!"
msgstr ""

msgid ""
"Example:\n"
"  has_many :primary_members, :class_name => \"User\",\n"
"           :primary_key => \"gidNumber\", # Group#gidNumber\n"
"           :foreign_key => \"gidNumber\"  # User#gidNumber\n"
"  has_many :members, :class_name => \"User\",\n"
"           :wrap => \"memberUid\" # Group#memberUid"
msgstr ""

# ActiveLdap::AttributeMethods#attribute_method?
msgid "overiding ActiveModel::AttributeMethods"
msgstr ""

# ActiveLdap::AttributeMethods::Dirty#save
msgid "Attempts to +save+ the record and clears changed attributes if successful."
msgstr ""

# ActiveLdap::AttributeMethods::Dirty#save!
msgid ""
"Attempts to <tt>save!</tt> the record and clears changed attributes if success"
"ful."
msgstr ""

# ActiveLdap::AttributeMethods::Dirty#reload
msgid "<tt>reload</tt> the record and clears changed attributes."
msgstr ""

msgid "get_attribute"
msgstr ""

# ActiveLdap::AttributeMethods::Read#get_attribute
msgid "Return the value of the attribute called by method_missing?"
msgstr ""

msgid "set_attribute"
msgstr ""

# ActiveLdap::AttributeMethods::Write#set_attribute
msgid "Set the value of the attribute called by method_missing?"
msgstr ""

# ActiveLdap::Attributes::Normalizable#normalize_attribute
msgid ""
"Enforce typing:\n"
"Hashes are for subtypes\n"
"Arrays are for multiple entries"
msgstr ""

msgid "normalize_attribute_options"
msgstr ""

# ActiveLdap::Attributes::Normalizable#normalize_attribute_options
msgid ""
"Makes the Hashized value from the full attribute name\n"
"e.g. userCertificate;binary => \"some_bin\"\n"
"     becomes userCertificate => {\"binary\" => \"some_bin\"}"
msgstr ""

msgid "unnormalize_attribute_options"
msgstr ""

# ActiveLdap::Attributes::Normalizable#unnormalize_attribute_options
msgid ""
"Unnormalizes all of the subtypes from a given set of nested hashes\n"
"and returns the attribute suffix and the final true value"
msgstr ""

msgid "ConfigurationError"
msgstr ""

msgid "An exception raised when there is a problem with Base.connect arguments"
msgstr ""

msgid "DeleteError"
msgstr ""

msgid "An exception raised when an ActiveLdap delete action fails"
msgstr ""

msgid "SaveError"
msgstr ""

msgid "An exception raised when an ActiveLdap save action failes"
msgstr ""

msgid "AuthenticationError"
msgstr ""

msgid "An exception raised when user authentication fails"
msgstr ""

msgid "ConnectionError"
msgstr ""

msgid "An exception raised when the LDAP conenction fails"
msgstr ""

msgid "ObjectClassError"
msgstr ""

msgid "An exception raised when an objectClass is not defined in the schema"
msgstr ""

msgid "AttributeAssignmentError"
msgstr ""

# ActiveLdap::AttributeAssignmentError
msgid ""
"An exception raised when there is an issue assigning a value to\n"
"an attribute"
msgstr ""

msgid "TimeoutError"
msgstr ""

msgid "An exception raised when a connection action fails due to a timeout"
msgstr ""

# ActiveLdap::DistinguishedNameInputInvalid#input
msgid "Returns the value of attribute input."
msgstr ""

# @return [DistinguishedNameInputInvalid]
msgid "a new instance of DistinguishedNameInputInvalid"
msgstr ""

# ActiveLdap::DistinguishedName::Parser#dn
# ActiveLdap::DistinguishedNameInvalid#dn
# ActiveLdap::Ldif::Record#dn
msgid "Returns the value of attribute dn."
msgstr ""

# ActiveLdap::DistinguishedNameInvalid#reason
# ActiveLdap::LdifInvalid#reason
msgid "Returns the value of attribute reason."
msgstr ""

# @return [DistinguishedNameInvalid]
msgid "a new instance of DistinguishedNameInvalid"
msgstr ""

# ActiveLdap::Ldif::Parser#ldif
# ActiveLdap::LdifInvalid#ldif
msgid "Returns the value of attribute ldif."
msgstr ""

# ActiveLdap::LdifInvalid#line
msgid "Returns the value of attribute line."
msgstr ""

# ActiveLdap::LdifInvalid#column
msgid "Returns the value of attribute column."
msgstr ""

# ActiveLdap::LdifInvalid#nearest
msgid "Returns the value of attribute nearest."
msgstr ""

# @return [LdifInvalid]
msgid "a new instance of LdifInvalid"
msgstr ""

# ActiveLdap::EntryInvalid#entry
msgid "Returns the value of attribute entry."
msgstr ""

# @return [EntryInvalid]
msgid "a new instance of EntryInvalid"
msgstr ""

# ActiveLdap::AdapterNotFound#adapter
msgid "Returns the value of attribute adapter."
msgstr ""

# @return [AdapterNotFound]
msgid "a new instance of AdapterNotFound"
msgstr ""

# @return [UnknownAttribute]
msgid "a new instance of UnknownAttribute"
msgstr ""

# ActiveLdap::AttributeValueInvalid#attribute
# ActiveLdap::Ldif::ModifyRecord::Operation#attribute
msgid "Returns the value of attribute attribute."
msgstr ""

# ActiveLdap::AttributeValueInvalid#value
# ActiveLdap::Ldif::ChangeRecord::Control#value
msgid "Returns the value of attribute value."
msgstr ""

# @return [AttributeValueInvalid]
msgid "a new instance of AttributeValueInvalid"
msgstr ""

# ActiveLdap::NotImplemented#target
msgid "Returns the value of attribute target."
msgstr ""

# @return [NotImplemented]
msgid "a new instance of NotImplemented"
msgstr ""

msgid "Base"
msgstr ""

# ActiveLdap::Base
msgid ""
"Base is the primary class which contains all of the core\n"
"ActiveLdap functionality. It is meant to only ever be subclassed\n"
"by extension classes."
msgstr ""

# ActiveLdap::Base.setup_connection
msgid ""
"Set LDAP connection configuration up. It doesn't connect\n"
"and bind to LDAP server. A connection to LDAP server is\n"
"created when it's needed."
msgstr ""

# ActiveLdap::Base.setup_connection
msgid ""
"== +config+\n"
"+config+ must be a hash that may contain any of the following fields:\n"
":password_block, :logger, :host, :port, :base, :bind_dn,\n"
":try_sasl, :allow_anonymous\n"
":bind_dn specifies the DN to bind with.\n"
":password_block specifies a Proc object that will yield a String to\n"
"  be used as the password when called.\n"
":logger specifies a logger object (Logger, Log4r::Logger and s on)\n"
":host sets the LDAP server hostname\n"
":port sets the LDAP server port\n"
":base overwrites Base.base - this affects EVERYTHING\n"
":try_sasl indicates that a SASL bind should be attempted when binding\n"
"  to the server (default: false)\n"
":sasl_mechanisms is an array of SASL mechanism to try\n"
"  (default: [\"GSSAPI\", \"CRAM-MD5\", \"EXTERNAL\"])\n"
":allow_anonymous indicates that a true anonymous bind is allowed when\n"
"  trying to bind to the server (default: true)\n"
":retries - indicates the number of attempts to reconnect that will be\n"
"  undertaken when a stale connection occurs. -1 means infinite.\n"
":sasl_quiet - if true, sets @sasl_quiet on the Ruby/LDAP connection\n"
":method - whether to use :ssl, :tls, or :plain (unencrypted)\n"
":retry_wait - seconds to wait before retrying a connection\n"
":scope - dictates how to find objects. ONELEVEL by default to\n"
"  avoid dn_attr collisions across OUs. Think before changing.\n"
":timeout - time in seconds - defaults to disabled. This CAN interrupt\n"
"  search() requests. Be warned.\n"
":retry_on_timeout - whether to reconnect when timeouts occur. Defaults\n"
"  to true\n"
"See lib/active_ldap/configuration.rb for defaults for each option"
msgstr ""

# ActiveLdap::Base.establish_connection
msgid ""
"establish_connection is deprecated since 1.1.0. Please use\n"
"setup_connection() instead."
msgstr ""

# ActiveLdap::Base.ldap_mapping
msgid ""
"This class function is used to setup all mappings between the subclass\n"
"and ldap for use in activeldap"
msgstr ""

# ActiveLdap::Base.ldap_mapping
msgid ""
"Example:\n"
"  ldap_mapping :dn_attribute => 'uid', :prefix => 'ou=People',\n"
"               :classes => ['top', 'posixAccount'],\n"
"               :scope => :sub"
msgstr ""

msgid "Base.base"
msgstr ""

# ActiveLdap::Base.base
# ActiveLdap::Base.parsed_base
msgid ""
"This method when included into Base provides\n"
"an inheritable, overwritable configuration setting"
msgstr ""

# ActiveLdap::Base.base
msgid ""
"This should be a string with the base of the\n"
"ldap server such as 'dc=example,dc=com', and\n"
"it should be overwritten by including\n"
"configuration.rb into this class.\n"
"When subclassing, the specified prefix will be concatenated."
msgstr ""

# ActiveLdap::Base.parsed_base
msgid ""
"This should be a string with the base of the\n"
"ldap server such as 'dc=example,dc=com', and\n"
"it should be overwritten by including\n"
"configuration.rb into this class.\n"
"When subclassing, the specified prefix will be concatenated.\n"
"for backward compatibility"
msgstr ""

# @param
msgid "tag|param|value"
msgstr ""

# @param value
msgid "the value to set the attribute abstract_class to."
msgstr ""

# ActiveLdap::Base.abstract_class
msgid "Returns the value of attribute abstract_class."
msgstr ""

# ActiveLdap::Base.abstract_class=
msgid "Sets the attribute abstract_class"
msgstr ""

msgid "new"
msgstr ""

# ActiveLdap::Base#initialize
msgid ""
"Creates a new instance of Base initializing all class and all\n"
"initialization.  Defines local defaults. See examples If multiple values\n"
"exist for dn_attribute, the first one put here will be authoritative"
msgstr ""

# @yieldparam [ActiveLdap::Base]
msgid "tag|yieldparam|_self"
msgstr ""

msgid "the object that the method was called on"
msgstr ""

# ActiveLdap::Base#==
msgid ""
"Returns true if the +comparison_object+ is the same object, or is of\n"
"the same type and has the same dn."
msgstr ""

# ActiveLdap::Base#eql?
msgid "Delegates to =="
msgstr ""

# ActiveLdap::Base#hash
msgid ""
"Delegates to id in order to allow two records of the same type and id\n"
"to work with something like:\n"
"  [ User.find(\"a\"), User.find(\"b\"), User.find(\"c\") ] &\n"
"    [ User.find(\"a\"), User.find(\"d\") ] # => [ User.find(\"a\") ]"
msgstr ""

msgid "attributes"
msgstr ""

# ActiveLdap::Base#attribute_names
msgid ""
"Return attribute methods so that a program can determine available\n"
"attributes dynamically without schema awareness"
msgstr ""

msgid "exist?"
msgstr ""

# ActiveLdap::Base#exist?
# ActiveLdap::Base#exists?
msgid "Return whether the entry exists in LDAP or not"
msgstr ""

msgid "dn"
msgstr ""

# ActiveLdap::Base#dn
msgid "Return the authoritative dn"
msgstr ""

# ActiveLdap::Base#to_key
msgid ""
"Returns this entity’s dn wrapped in an Array or nil if the entity' s dn is not"
" set."
msgstr ""

# ActiveLdap::Base#update_attribute
msgid "Updates a given attribute and saves immediately"
msgstr ""

# ActiveLdap::Base#update_attributes
msgid ""
"This performs a bulk update of attributes and immediately\n"
"calls #save."
msgstr ""

# ActiveLdap::Base#attributes
msgid ""
"This returns the key value pairs in @data with all values\n"
"cloned"
msgstr ""

# ActiveLdap::Base#attributes=
msgid ""
"This allows a bulk update to the attributes of a record\n"
"without forcing an immediate save or validation."
msgstr ""

# ActiveLdap::Base#attributes=
msgid ""
"It is unwise to attempt objectClass updates this way.\n"
"Also be sure to only pass in key-value pairs of your choosing.\n"
"Do not let URL/form hackers supply the keys."
msgstr ""

# ActiveLdap::Base#enforce_type
msgid "enforce_type"
msgstr ""

# ActiveLdap::Base#enforce_type
msgid ""
"enforce_type applies your changes without attempting to write to LDAP.\n"
"This means that if you set userCertificate to somebinary value, it will\n"
"wrap it up correctly."
msgstr ""

# ActiveLdap::Base#array_of
msgid "array_of"
msgstr ""

# ActiveLdap::Base#array_of
msgid ""
"Returns the array form of a value, or not an array if\n"
"false is passed in."
msgstr ""

msgid ":nodoc:"
msgstr ""

msgid "Configuration"
msgstr ""

# ActiveLdap::Configuration
msgid ""
"Configuration provides the default settings required for\n"
"ActiveLdap to work with your LDAP server. All of these\n"
"settings can be passed in at initialization time."
msgstr ""

# @return [URIConfigurationMerger]
msgid "a new instance of URIConfigurationMerger"
msgstr ""

msgid "Return the schema object"
msgstr ""

# @return [Parser]
msgid "a new instance of Parser"
msgstr ""

# ActiveLdap::DistinguishedName#rdns
msgid "Returns the value of attribute rdns."
msgstr ""

# @return [DistinguishedName]
msgid "a new instance of DistinguishedName"
msgstr ""

# ActiveLdap::DistinguishedName#to_str
msgid "for backward compatibility"
msgstr ""

# ActiveLdap::EntryAttribute#must
msgid "Returns the value of attribute must."
msgstr ""

# ActiveLdap::EntryAttribute#may
msgid "Returns the value of attribute may."
msgstr ""

# ActiveLdap::EntryAttribute#object_classes
msgid "Returns the value of attribute object_classes."
msgstr ""

# ActiveLdap::EntryAttribute#schemata
msgid "Returns the value of attribute schemata."
msgstr ""

# @return [EntryAttribute]
msgid "a new instance of EntryAttribute"
msgstr ""

msgid "register"
msgstr ""

# ActiveLdap::EntryAttribute#register
msgid ""
"Make a method entry for _every_ alias of a valid attribute and map it\n"
"onto the first attribute passed in."
msgstr ""

# @return [Scanner]
msgid "a new instance of Scanner"
msgstr ""

# ActiveLdap::Ldif#version
msgid "Returns the value of attribute version."
msgstr ""

# ActiveLdap::Ldif#records
msgid "Returns the value of attribute records."
msgstr ""

# @return [Ldif]
msgid "a new instance of Ldif"
msgstr ""

# ActiveLdap::Ldif::ModifyRecord::Operation#attributes
# ActiveLdap::Ldif::Record#attributes
msgid "Returns the value of attribute attributes."
msgstr ""

# @return [Record]
msgid "a new instance of Record"
msgstr ""

# ActiveLdap::Ldif::ChangeRecord#controls
msgid "Returns the value of attribute controls."
msgstr ""

# ActiveLdap::Ldif::ChangeRecord#change_type
msgid "Returns the value of attribute change_type."
msgstr ""

# @return [ChangeRecord]
msgid "a new instance of ChangeRecord"
msgstr ""

# @return [Control]
msgid "a new instance of Control"
msgstr ""

# @return [AddRecord]
msgid "a new instance of AddRecord"
msgstr ""

# @return [DeleteRecord]
msgid "a new instance of DeleteRecord"
msgstr ""

# ActiveLdap::Ldif::ModifyNameRecord#new_rdn
msgid "Returns the value of attribute new_rdn."
msgstr ""

# ActiveLdap::Ldif::ModifyNameRecord#new_superior
msgid "Returns the value of attribute new_superior."
msgstr ""

# @return [ModifyNameRecord]
msgid "a new instance of ModifyNameRecord"
msgstr ""

# @return [ModifyDNRecord]
msgid "a new instance of ModifyDNRecord"
msgstr ""

# @return [ModifyRDNRecord]
msgid "a new instance of ModifyRDNRecord"
msgstr ""

# ActiveLdap::Ldif::ModifyRecord#operations
msgid "Returns the value of attribute operations."
msgstr ""

# ActiveLdap::Ldif::ModifyRecord::Operation#options
msgid "Returns the value of attribute options."
msgstr ""

# @return [Operation]
msgid "a new instance of Operation"
msgstr ""

# @return [AddOperation]
msgid "a new instance of AddOperation"
msgstr ""

# @return [DeleteOperation]
msgid "a new instance of DeleteOperation"
msgstr ""

# @return [ReplaceOperation]
msgid "a new instance of ReplaceOperation"
msgstr ""

# @return [LogSubscriber]
msgid "a new instance of LogSubscriber"
msgstr ""

msgid "find"
msgstr ""

# ActiveLdap::Operations::Find#find
msgid ""
"Finds the first match for value where |value| is the value of some\n"
"|field|, or the wildcard match. This is only useful for derived classes.\n"
"usage: Subclass.find(:all, :attribute => \"cn\", :value => \"some*val\")\n"
"       Subclass.find(:all, 'some*val')"
msgstr ""

# ActiveLdap::Operations::Find#first
msgid ""
"A convenience wrapper for <tt>find(:first,\n"
"*args)</tt>. You can pass in all the same arguments\n"
"to this method as you can to <tt>find(:first)</tt>."
msgstr ""

# ActiveLdap::Operations::Find#last
msgid ""
"A convenience wrapper for <tt>find(:last,\n"
"*args)</tt>. You can pass in all the same arguments\n"
"to this method as you can to <tt>find(:last)</tt>."
msgstr ""

# ActiveLdap::Operations::Find#all
msgid ""
"This is an alias for find(:all).  You can pass in\n"
"all the same arguments to this method as you can\n"
"to find(:all)"
msgstr ""

msgid "new_entry?"
msgstr ""

msgid "Return whether the entry is new entry in LDAP or not"
msgstr ""

msgid "Return whether the entry is saved entry or not."
msgstr ""

msgid "destroy"
msgstr ""

msgid "Delete this entry from LDAP"
msgstr ""

msgid "save"
msgstr ""

# ActiveLdap::Persistence#save
msgid ""
"Save and validate this object into LDAP\n"
"either adding or replacing attributes\n"
"TODO: Relative DN support"
msgstr ""

# @return [Schema]
msgid "a new instance of Schema"
msgstr ""

msgid "fetch"
msgstr ""

# ActiveLdap::Schema#[]
# ActiveLdap::Schema#fetch
msgid ""
"This is just like LDAP::Schema#attribute except that it allows\n"
"look up in any of the given keys.\n"
"e.g.\n"
" fetch('attributeTypes', 'cn', 'DESC')\n"
" fetch('ldapSyntaxes', '1.3.6.1.4.1.1466.115.121.1.5', 'DESC')"
msgstr ""

# ActiveLdap::Schema::Entry#id
msgid "Returns the value of attribute id."
msgstr ""

# ActiveLdap::Schema::Entry#aliases
msgid "Returns the value of attribute aliases."
msgstr ""

# ActiveLdap::Schema::Entry#description
msgid "Returns the value of attribute description."
msgstr ""

# ActiveLdap::Schema::Syntax#length
msgid "Returns the value of attribute length."
msgstr ""

# @return [Syntax]
msgid "a new instance of Syntax"
msgstr ""

# ActiveLdap::Schema::Attribute#super_attribute
msgid "Returns the value of attribute super_attribute."
msgstr ""

# @return [Attribute]
msgid "a new instance of Attribute"
msgstr ""

# ActiveLdap::Schema::Attribute#read_only?
msgid "read_only?"
msgstr ""

# ActiveLdap::Schema::Attribute#read_only?
msgid ""
"Returns true if an attribute is read-only\n"
"NO-USER-MODIFICATION"
msgstr ""

msgid "single_value?"
msgstr ""

# ActiveLdap::Schema::Attribute#single_value?
msgid ""
"Returns true if an attribute can only have one\n"
"value defined\n"
"SINGLE-VALUE"
msgstr ""

msgid "binary?"
msgstr ""

# ActiveLdap::Schema::Attribute#binary?
msgid ""
"Returns true if the given attribute's syntax is binary syntax,\n"
"X-NOT-HUMAN-READABLE or X-BINARY-TRANSFER-REQUIRED"
msgstr ""

# ActiveLdap::Schema::Attribute#apply_encoding
msgid ""
"Sets binary encoding to value if the given attribute's syntax\n"
"is binary syntax. Does nothing otherwise."
msgstr ""

# ActiveLdap::Schema::Attribute#binary_required?
msgid "binary_required?"
msgstr ""

# ActiveLdap::Schema::Attribute#binary_required?
msgid "Returns true if the value MUST be transferred in binary"
msgstr ""

# ActiveLdap::Schema::Attribute#directory_operation?
msgid "directory_operation?"
msgstr ""

# ActiveLdap::Schema::Attribute#directory_operation?
msgid ""
"Returns true if an attribute is directory operation.\n"
"It means that USAGE contains directoryOperation."
msgstr ""

# ActiveLdap::Schema::ObjectClass#super_classes
msgid "Returns the value of attribute super_classes."
msgstr ""

# @return [ObjectClass]
msgid "a new instance of ObjectClass"
msgstr ""

# @return [SupportedControl]
msgid "a new instance of SupportedControl"
msgstr ""

# ActiveLdap::Validations#validate_required_ldap_values
msgid "validate_required_ldap_values"
msgstr ""

# ActiveLdap::Validations#validate_required_ldap_values
msgid ""
"Basic validation:\n"
"- Verify that every 'MUST' specified in the schema has a value defined"
msgstr ""

# @return [Serializer]
msgid "a new instance of Serializer"
msgstr ""

# @return [Xml]
msgid "a new instance of Xml"
msgstr ""
